/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.ChangePasswordRepresentation;
import org.alfresco.activiti.model.ImageUploadRepresentation;
import org.alfresco.activiti.model.UserRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "UserProfile", description = "the UserProfile API")
public interface UserProfileApi {

    @ApiOperation(value = "Change user password", nickname = "changePasswordUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Password was empty or old password did not match") })
    @RequestMapping(value = "/activiti-app/api/enterprise/profile-password",
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> changePasswordUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody ChangePasswordRepresentation body);


    @ApiOperation(value = "Retrieve user profile picture", nickname = "getProfilePictureUsingGET", notes = "Generally returns an image file", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/profile-picture",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> getProfilePictureUsingGET();


    @ApiOperation(value = "Get user profile", nickname = "getProfileUsingGET", notes = "This operation returns account information for the current user. This is useful to get the name, email, the groups that the user is part of, the user picture, etc.", response = UserRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/profile",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserRepresentation> getProfileUsingGET();


    @ApiOperation(value = "Update user profile", nickname = "updateUserUsingPOST", notes = "Only a first name, last name, email and company can be updated", response = UserRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/profile",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserRepresentation> updateUserUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody UserRepresentation body);


    @ApiOperation(value = "Change user profile picture", nickname = "uploadProfilePictureUsingPOST", notes = "", response = ImageUploadRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ImageUploadRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/profile-picture",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ImageUploadRepresentation> uploadProfilePictureUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody Object body);

}
