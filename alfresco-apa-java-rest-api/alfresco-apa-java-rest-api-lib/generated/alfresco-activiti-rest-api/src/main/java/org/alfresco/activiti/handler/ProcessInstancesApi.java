/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.CreateProcessInstanceRepresentation;
import org.alfresco.activiti.model.FormDefinitionRepresentation;
import org.alfresco.activiti.model.HistoricProcessInstanceQueryRepresentation;
import org.alfresco.activiti.model.IdentityLinkRepresentation;
import org.alfresco.activiti.model.ProcessInstanceAuditInfoRepresentation;
import org.alfresco.activiti.model.ProcessInstanceFilterRequestRepresentation;
import org.alfresco.activiti.model.ProcessInstanceQueryRepresentation;
import org.alfresco.activiti.model.ProcessInstanceRepresentation;
import org.alfresco.activiti.model.ProcessInstanceVariableRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationDecisionTaskRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationProcessContentRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationProcessInstanceRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "ProcessInstances", description = "the ProcessInstances API")
public interface ProcessInstancesApi {

    @ApiOperation(value = "Activate a process instance", nickname = "activateProcessInstanceUsingPUT", notes = "", response = ProcessInstanceRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessInstanceRepresentation.class),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/activate",
        produces = "application/json", 
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ProcessInstanceRepresentation> activateProcessInstanceUsingPUT(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Add a user or group involvement to a process instance", nickname = "createIdentityLinkUsingPOST1", notes = "", response = IdentityLinkRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = IdentityLinkRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/identitylinks",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<IdentityLinkRepresentation> createIdentityLinkUsingPOST1(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId, @ApiParam(value = "" ) @Valid @RequestBody IdentityLinkRepresentation body);


    @ApiOperation(value = "Remove a user or group involvement from a process instance", nickname = "deleteIdentityLinkUsingDELETE1", notes = "", tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteIdentityLinkUsingDELETE1(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId, @ApiParam(value = "family", required=true) @PathVariable("family") String family, @ApiParam(value = "identityId", required=true) @PathVariable("identityId") String identityId, @ApiParam(value = "type", required=true) @PathVariable("type") String type);


    @ApiOperation(value = "Cancel or remove a process instance", nickname = "deleteProcessInstanceUsingDELETE", notes = "If the process instance has not yet been completed, it will be cancelled. If it has already finished or been cancelled then the process instance will be removed and will no longer appear in queries.", tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "If the user does not have permission to cancel or remove the process instance"),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteProcessInstanceUsingDELETE(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "List process instances using a filter", nickname = "filterProcessInstancesUsingPOST", notes = "The request body provided must define either a valid filterId value or filter object", response = ResultListDataRepresentationProcessInstanceRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationProcessInstanceRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/filter",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationProcessInstanceRepresentation> filterProcessInstancesUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody ProcessInstanceFilterRequestRepresentation body);


    @ApiOperation(value = "Get decision tasks in a process instance", nickname = "getHistoricProcessInstanceDecisionTasksUsingGET", notes = "", response = ResultListDataRepresentationDecisionTaskRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationDecisionTaskRepresentation.class),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/decision-tasks",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationDecisionTaskRepresentation> getHistoricProcessInstanceDecisionTasksUsingGET(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Get historic variables for a process instance", nickname = "getHistoricProcessInstanceVariablesUsingGET", notes = "", response = ProcessInstanceVariableRepresentation.class, responseContainer = "List", tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessInstanceVariableRepresentation.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/historic-variables",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<List<ProcessInstanceVariableRepresentation>> getHistoricProcessInstanceVariablesUsingGET(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Query historic process instances", nickname = "getHistoricProcessInstancesUsingPOST", notes = "", response = ResultListDataRepresentationProcessInstanceRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationProcessInstanceRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/historic-process-instances/query",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationProcessInstanceRepresentation> getHistoricProcessInstancesUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody HistoricProcessInstanceQueryRepresentation body);


    @ApiOperation(value = "Get a user or group involvement with a process instance", nickname = "getIdentityLinkTypeUsingGET1", notes = "", response = IdentityLinkRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdentityLinkRepresentation.class),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<IdentityLinkRepresentation> getIdentityLinkTypeUsingGET1(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId, @ApiParam(value = "family", required=true) @PathVariable("family") String family, @ApiParam(value = "identityId", required=true) @PathVariable("identityId") String identityId, @ApiParam(value = "type", required=true) @PathVariable("type") String type);


    @ApiOperation(value = "List either the users or groups involved with a process instance", nickname = "getIdentityLinksForFamilyUsingGET1", notes = "", response = IdentityLinkRepresentation.class, responseContainer = "List", tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdentityLinkRepresentation.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<List<IdentityLinkRepresentation>> getIdentityLinksForFamilyUsingGET1(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId, @ApiParam(value = "family", required=true) @PathVariable("family") String family);


    @ApiOperation(value = "List the users and groups involved with a process instance", nickname = "getIdentityLinksUsingGET1", notes = "", response = IdentityLinkRepresentation.class, responseContainer = "List", tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdentityLinkRepresentation.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/identitylinks",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<List<IdentityLinkRepresentation>> getIdentityLinksUsingGET1(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "List content attached to process instance fields", nickname = "getProcessInstanceContentUsingGET", notes = "", response = ResultListDataRepresentationProcessContentRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationProcessContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/field-content",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationProcessContentRepresentation> getProcessInstanceContentUsingGET(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Get the process diagram for the process instance", nickname = "getProcessInstanceDiagramUsingGET", notes = "", response = byte[].class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = byte[].class),
        @ApiResponse(code = 404, message = "If the process instance does not exist or is not available for the current user") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/diagram",
        produces = "image/png", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<byte[]> getProcessInstanceDiagramUsingGET(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Get a process instance start form", nickname = "getProcessInstanceStartFormUsingGET", notes = "The start form for a process instance can be retrieved when the process definition has a start form defined (hasStartForm = true on the process instance)", response = FormDefinitionRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FormDefinitionRepresentation.class),
        @ApiResponse(code = 404, message = "If the process instance does not exist or the process definition does not have a start form") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/start-form",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<FormDefinitionRepresentation> getProcessInstanceStartFormUsingGET(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Get a process instance", nickname = "getProcessInstanceUsingGET", notes = "", response = ProcessInstanceRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessInstanceRepresentation.class),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ProcessInstanceRepresentation> getProcessInstanceUsingGET(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Query process instances", nickname = "getProcessInstancesUsingPOST", notes = "", response = ResultListDataRepresentationProcessInstanceRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationProcessInstanceRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/query",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationProcessInstanceRepresentation> getProcessInstancesUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody ProcessInstanceQueryRepresentation body);


    @ApiOperation(value = "Get the audit log for a process instance", nickname = "getTaskAuditLogUsingGET", notes = "", response = ProcessInstanceAuditInfoRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessInstanceAuditInfoRepresentation.class),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/audit-log",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ProcessInstanceAuditInfoRepresentation> getTaskAuditLogUsingGET(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Start a process instance", nickname = "startNewProcessInstanceUsingPOST", notes = "", response = ProcessInstanceRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessInstanceRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ProcessInstanceRepresentation> startNewProcessInstanceUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody CreateProcessInstanceRepresentation body);


    @ApiOperation(value = "Suspend a process instance", nickname = "suspendProcessInstanceUsingPUT", notes = "", response = ProcessInstanceRepresentation.class, tags={ "process-instances", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessInstanceRepresentation.class),
        @ApiResponse(code = 404, message = "If the process instance does not exist") })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/suspend",
        produces = "application/json", 
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ProcessInstanceRepresentation> suspendProcessInstanceUsingPUT(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId);

}
