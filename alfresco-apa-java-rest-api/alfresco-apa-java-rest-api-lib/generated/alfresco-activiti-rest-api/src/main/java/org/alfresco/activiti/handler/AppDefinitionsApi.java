/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.AppDefinitionPublishRepresentation;
import org.alfresco.activiti.model.AppDefinitionRepresentation;
import org.alfresco.activiti.model.AppDefinitionSaveRepresentation;
import org.alfresco.activiti.model.AppDefinitionUpdateResultRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "AppDefinitions", description = "the AppDefinitions API")
public interface AppDefinitionsApi {

    @ApiOperation(value = "deleteAppDefinition", nickname = "deleteAppDefinitionUsingDELETE", notes = "", tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/{appDefinitionId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteAppDefinitionUsingDELETE(@ApiParam(value = "appDefinitionId", required=true) @PathVariable("appDefinitionId") Long appDefinitionId);


    @ApiOperation(value = "Export an app definition", nickname = "exportAppDefinitionUsingGET", notes = "This will return a zip file containing the app definition model and all related models (process definitions and forms).", tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "No application definition id provided"),
        @ApiResponse(code = 403, message = "User has no sufficient capabilities or permissions"),
        @ApiResponse(code = 500, message = "Could not deserialize app definition <div><b>or</b></div> Model contains validation errors, please fix the issues in the editor <div><b>or</b></div> Could not generate app definition zip archive") })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/{modelId}/export",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> exportAppDefinitionUsingGET(@ApiParam(value = "modelId from a runtime app or the id of an app definition model", required=true) @PathVariable("modelId") Long modelId);


    @ApiOperation(value = "Get an app definition", nickname = "getAppDefinitionUsingGET", notes = "", response = AppDefinitionRepresentation.class, tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppDefinitionRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/{modelId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<AppDefinitionRepresentation> getAppDefinitionUsingGET(@ApiParam(value = "Application definition ID", required=true) @PathVariable("modelId") Long modelId);


    @ApiOperation(value = "importAndPublishApp", nickname = "importAndPublishAppUsingPOST", notes = "", response = AppDefinitionUpdateResultRepresentation.class, tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppDefinitionUpdateResultRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/{modelId}/publish-app",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<AppDefinitionUpdateResultRepresentation> importAndPublishAppUsingPOST(@ApiParam(value = "modelId", required=true) @PathVariable("modelId") Long modelId, @ApiParam(value = "" ) @Valid @RequestBody Object body);


    @ApiOperation(value = "importAndPublishApp", nickname = "importAndPublishAppUsingPOST1", notes = "", response = AppDefinitionUpdateResultRepresentation.class, tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppDefinitionUpdateResultRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/publish-app",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<AppDefinitionUpdateResultRepresentation> importAndPublishAppUsingPOST1(@ApiParam(value = "" ) @Valid @RequestBody Object body);


    @ApiOperation(value = "Update the content of an existing app", nickname = "importAppDefinitionUsingPOST", notes = "Imports an app inside an existing app definition and creates a new version<p>Before using any new or updated processes included in the import the app must be (re-)published and deployed.", response = AppDefinitionRepresentation.class, tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppDefinitionRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/{modelId}/import",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<AppDefinitionRepresentation> importAppDefinitionUsingPOST(@ApiParam(value = "modelId", required=true) @PathVariable("modelId") Long modelId, @ApiParam(value = "" ) @Valid @RequestBody Object body);


    @ApiOperation(value = "Import a new app definition", nickname = "importAppDefinitionUsingPOST1", notes = "Allows a zip file to be uploaded containing an app definition and any number of included models.<p>This is useful to bootstrap an environment (for users or continuous integration).<p>Before using any processes included in the import the app must be published and deployed.", response = AppDefinitionRepresentation.class, tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppDefinitionRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/import",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<AppDefinitionRepresentation> importAppDefinitionUsingPOST1(@ApiParam(value = "Whether to renew user and group identifiers") @Valid @RequestParam(value = "renewIdmEntries", required = false) String renewIdmEntries, @ApiParam(value = "" ) @Valid @RequestBody Object body);


    @ApiOperation(value = "Publish an app definition", nickname = "publishAppDefinitionUsingPOST", notes = "Publishing an app definition makes it available for use. The application must not have any validation errors or an error will be returned.<p>Before an app definition can be used by other users, it must also be deployed for their use", response = AppDefinitionUpdateResultRepresentation.class, tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppDefinitionUpdateResultRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/{modelId}/publish",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<AppDefinitionUpdateResultRepresentation> publishAppDefinitionUsingPOST(@ApiParam(value = "modelId", required=true) @PathVariable("modelId") Long modelId, @ApiParam(value = "" ) @Valid @RequestBody AppDefinitionPublishRepresentation body);


    @ApiOperation(value = "Update an app definition", nickname = "updateAppDefinitionUsingPUT", notes = "", response = AppDefinitionUpdateResultRepresentation.class, tags={ "app-definitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AppDefinitionUpdateResultRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/app-definitions/{modelId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<AppDefinitionUpdateResultRepresentation> updateAppDefinitionUsingPUT(@ApiParam(value = "Application definition ID", required=true) @PathVariable("modelId") Long modelId, @ApiParam(value = "" ) @Valid @RequestBody AppDefinitionSaveRepresentation body);

}
