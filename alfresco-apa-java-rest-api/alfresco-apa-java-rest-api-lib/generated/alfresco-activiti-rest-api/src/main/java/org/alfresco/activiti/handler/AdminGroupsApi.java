/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.AbstractGroupRepresentation;
import org.alfresco.activiti.model.AddGroupCapabilitiesRepresentation;
import org.alfresco.activiti.model.GroupRepresentation;
import org.alfresco.activiti.model.LightGroupRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationLightUserRepresentation;
import org.alfresco.activiti.model.UpdateGroupRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "AdminGroups", description = "the AdminGroups API")
public interface AdminGroupsApi {

    @ApiOperation(value = "Activate a group", nickname = "activateUsingPOST", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/action/activate",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> activateUsingPOST(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId);


    @ApiOperation(value = "Add users to a group", nickname = "addAllUsersToGroupUsingPOST", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/add-all-users",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> addAllUsersToGroupUsingPOST(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId);


    @ApiOperation(value = "Add capabilities to a group", nickname = "addGroupCapabilitiesUsingPOST", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/capabilities",
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> addGroupCapabilitiesUsingPOST(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "" ) @Valid @RequestBody AddGroupCapabilitiesRepresentation body);


    @ApiOperation(value = "Add a user to a group", nickname = "addGroupMemberUsingPOST", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/members/{userId}",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> addGroupMemberUsingPOST(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "Get a related group", nickname = "addRelatedGroupUsingPOST", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> addRelatedGroupUsingPOST(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "relatedGroupId", required=true) @PathVariable("relatedGroupId") Long relatedGroupId, @NotNull @ApiParam(value = "type", required = true) @Valid @RequestParam(value = "type", required = true) String type);


    @ApiOperation(value = "Create a group", nickname = "createNewGroupUsingPOST", notes = "", response = LightGroupRepresentation.class, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightGroupRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<LightGroupRepresentation> createNewGroupUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody GroupRepresentation body);


    @ApiOperation(value = "Remove a capability from a group", nickname = "deleteGroupCapabilityUsingDELETE", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/capabilities/{groupCapabilityId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteGroupCapabilityUsingDELETE(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "groupCapabilityId", required=true) @PathVariable("groupCapabilityId") Long groupCapabilityId);


    @ApiOperation(value = "Delete a member from a group", nickname = "deleteGroupMemberUsingDELETE", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/members/{userId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteGroupMemberUsingDELETE(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "Delete a group", nickname = "deleteGroupUsingDELETE", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteGroupUsingDELETE(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId);


    @ApiOperation(value = "Delete a related group", nickname = "deleteRelatedGroupUsingDELETE", notes = "", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteRelatedGroupUsingDELETE(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "relatedGroupId", required=true) @PathVariable("relatedGroupId") Long relatedGroupId);


    @ApiOperation(value = "List group capabilities", nickname = "getCapabilitiesUsingGET", notes = "", response = String.class, responseContainer = "List", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/potential-capabilities",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<List<String>> getCapabilitiesUsingGET(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId);


    @ApiOperation(value = "Get group members", nickname = "getGroupUsersUsingGET", notes = "", response = ResultListDataRepresentationLightUserRepresentation.class, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationLightUserRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/users",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationLightUserRepresentation> getGroupUsersUsingGET(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "filter") @Valid @RequestParam(value = "filter", required = false) String filter, @ApiParam(value = "page") @Valid @RequestParam(value = "page", required = false) Integer page, @ApiParam(value = "pageSize") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize);


    @ApiOperation(value = "Get a group", nickname = "getGroupUsingGET", notes = "", response = AbstractGroupRepresentation.class, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AbstractGroupRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<AbstractGroupRepresentation> getGroupUsingGET(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "includeAllUsers") @Valid @RequestParam(value = "includeAllUsers", required = false) Boolean includeAllUsers, @ApiParam(value = "summary") @Valid @RequestParam(value = "summary", required = false) Boolean summary);


    @ApiOperation(value = "Query groups", nickname = "getGroupsUsingGET1", notes = "", response = LightGroupRepresentation.class, responseContainer = "List", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightGroupRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<List<LightGroupRepresentation>> getGroupsUsingGET1(@ApiParam(value = "tenantId") @Valid @RequestParam(value = "tenantId", required = false) Long tenantId, @ApiParam(value = "functional") @Valid @RequestParam(value = "functional", required = false) Boolean functional, @ApiParam(value = "summary") @Valid @RequestParam(value = "summary", required = false) Boolean summary);


    @ApiOperation(value = "Get related groups", nickname = "getRelatedGroupsUsingGET", notes = "", response = LightGroupRepresentation.class, responseContainer = "List", tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightGroupRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}/related-groups",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<List<LightGroupRepresentation>> getRelatedGroupsUsingGET(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId);


    @ApiOperation(value = "Update a group", nickname = "updateGroupUsingPUT", notes = "", response = LightGroupRepresentation.class, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightGroupRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/admin/groups/{groupId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<LightGroupRepresentation> updateGroupUsingPUT(@ApiParam(value = "groupId", required=true) @PathVariable("groupId") Long groupId, @ApiParam(value = "" ) @Valid @RequestBody UpdateGroupRepresentation body);

}
