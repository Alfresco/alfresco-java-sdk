/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.BoxUserAccountCredentialsRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationBoxContent;
import org.alfresco.activiti.model.UserAccountCredentialsRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "IntegrationBox", description = "the IntegrationBox API")
public interface IntegrationBoxApi {

    @ApiOperation(value = "Box Authorization", nickname = "confirmAuthorisationUsingGET", notes = "Returns Box OAuth HTML Page", tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Error while calling Box"),
        @ApiResponse(code = 403, message = "Box module is not enabled"),
        @ApiResponse(code = 409, message = "No credentials stored to access box or credentials are invalid or expired") })
    @RequestMapping(value = "/activiti-app/api/enterprise/integration/box/confirm-auth-request",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> confirmAuthorisationUsingGET();


    @ApiOperation(value = "Add Box account", nickname = "createRepositoryAccountUsingPOST", notes = "", tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "Box module is not enabled") })
    @RequestMapping(value = "/activiti-app/api/enterprise/integration/box/{userId}/account",
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> createRepositoryAccountUsingPOST(@ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId, @ApiParam(value = "" ) @Valid @RequestBody UserAccountCredentialsRepresentation body);


    @ApiOperation(value = "Delete account information", nickname = "deleteRepositoryAccountUsingDELETE", notes = "", tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "Box module is not enabled"),
        @ApiResponse(code = 404, message = "No Box account exists") })
    @RequestMapping(value = "/activiti-app/api/enterprise/integration/box/{userId}/account",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteRepositoryAccountUsingDELETE(@ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "Get status information", nickname = "getBoxPluginStatusUsingGET", notes = "", response = Boolean.class, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/integration/box/status",
        produces = "*/*", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Boolean> getBoxPluginStatusUsingGET();


    @ApiOperation(value = "List file and folders", nickname = "getFilesUsingGET", notes = "", response = ResultListDataRepresentationBoxContent.class, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationBoxContent.class),
        @ApiResponse(code = 400, message = "Error while calling Box"),
        @ApiResponse(code = 403, message = "Box module is not enabled"),
        @ApiResponse(code = 409, message = "No credentials stored to access box or credentials are invalid or expired") })
    @RequestMapping(value = "/activiti-app/api/enterprise/integration/box/files",
        produces = "*/*", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationBoxContent> getFilesUsingGET(@ApiParam(value = "filter") @Valid @RequestParam(value = "filter", required = false) String filter, @ApiParam(value = "parent") @Valid @RequestParam(value = "parent", required = false) String parent);


    @ApiOperation(value = "Get account information", nickname = "getRepositoryAccountUsingGET", notes = "", tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 401, message = "User does not have sufficient permission or an error occurred", response = BoxUserAccountCredentialsRepresentation.class),
        @ApiResponse(code = 403, message = "Box module is not enabled") })
    @RequestMapping(value = "/activiti-app/api/enterprise/integration/box/{userId}/account",
        produces = "*/*", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> getRepositoryAccountUsingGET(@ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "Update account information", nickname = "updateRepositoryAccountUsingPUT", notes = "", tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "Box module is not enabled"),
        @ApiResponse(code = 404, message = "No Box account exists") })
    @RequestMapping(value = "/activiti-app/api/enterprise/integration/box/{userId}/account",
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> updateRepositoryAccountUsingPUT(@ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId, @ApiParam(value = "" ) @Valid @RequestBody UserAccountCredentialsRepresentation body);

}
