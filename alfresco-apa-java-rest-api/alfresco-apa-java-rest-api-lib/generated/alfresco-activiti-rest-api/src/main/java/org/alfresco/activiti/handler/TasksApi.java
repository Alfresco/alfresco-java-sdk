/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.HistoricTaskInstanceQueryRepresentation;
import org.alfresco.activiti.model.IdentityLinkRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationTaskRepresentation;
import org.alfresco.activiti.model.TaskAuditInfoRepresentation;
import org.alfresco.activiti.model.TaskFilterRequestRepresentation;
import org.alfresco.activiti.model.TaskQueryRepresentation;
import org.alfresco.activiti.model.TaskRepresentation;
import org.alfresco.activiti.model.TaskUpdateRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "Tasks", description = "the Tasks API")
public interface TasksApi {

    @ApiOperation(value = "List the users and groups involved with a task", nickname = "createIdentityLinkUsingPOST2", notes = "", response = IdentityLinkRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = IdentityLinkRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/identitylinks",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<IdentityLinkRepresentation> createIdentityLinkUsingPOST2(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "" ) @Valid @RequestBody IdentityLinkRepresentation body);


    @ApiOperation(value = "Create a standalone task", nickname = "createNewTaskUsingPOST", notes = "A standalone task is one which is not associated with any process instance.", response = TaskRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TaskRepresentation.class),
        @ApiResponse(code = 400, message = "If the task ID is not empty") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<TaskRepresentation> createNewTaskUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody TaskRepresentation body);


    @ApiOperation(value = "Remove a user or group involvement from a task", nickname = "deleteIdentityLinkUsingDELETE2", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteIdentityLinkUsingDELETE2(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "family", required=true) @PathVariable("family") String family, @ApiParam(value = "identityId", required=true) @PathVariable("identityId") String identityId, @ApiParam(value = "type", required=true) @PathVariable("type") String type);


    @ApiOperation(value = "Delete a task", nickname = "deleteTaskUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteTaskUsingDELETE(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Filter a list of tasks", nickname = "filterTasksUsingPOST", notes = "", response = ResultListDataRepresentationTaskRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationTaskRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/filter",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationTaskRepresentation> filterTasksUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody TaskFilterRequestRepresentation body);


    @ApiOperation(value = "Get a user or group involvement with a task", nickname = "getIdentityLinkTypeUsingGET2", notes = "", response = IdentityLinkRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdentityLinkRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<IdentityLinkRepresentation> getIdentityLinkTypeUsingGET2(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "family", required=true) @PathVariable("family") String family, @ApiParam(value = "identityId", required=true) @PathVariable("identityId") String identityId, @ApiParam(value = "type", required=true) @PathVariable("type") String type);


    @ApiOperation(value = "List either the users or groups involved with a process instance", nickname = "getIdentityLinksForFamilyUsingGET2", notes = "", response = IdentityLinkRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdentityLinkRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/identitylinks/{family}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<List<IdentityLinkRepresentation>> getIdentityLinksForFamilyUsingGET2(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "family", required=true) @PathVariable("family") String family);


    @ApiOperation(value = "getIdentityLinks", nickname = "getIdentityLinksUsingGET2", notes = "", response = IdentityLinkRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdentityLinkRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/identitylinks",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<List<IdentityLinkRepresentation>> getIdentityLinksUsingGET2(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get the audit log for a task", nickname = "getTaskAuditLogUsingGET1", notes = "", response = TaskAuditInfoRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TaskAuditInfoRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/audit",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<TaskAuditInfoRepresentation> getTaskAuditLogUsingGET1(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get a task", nickname = "getTaskUsingGET", notes = "", response = TaskRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TaskRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<TaskRepresentation> getTaskUsingGET(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Query historic tasks", nickname = "listHistoricTasksUsingPOST", notes = "", response = ResultListDataRepresentationTaskRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationTaskRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/historic-tasks/query",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationTaskRepresentation> listHistoricTasksUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody HistoricTaskInstanceQueryRepresentation body);


    @ApiOperation(value = "List tasks", nickname = "listTasksUsingPOST", notes = "", response = ResultListDataRepresentationTaskRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationTaskRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/query",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationTaskRepresentation> listTasksUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody TaskQueryRepresentation body);


    @ApiOperation(value = "Update a task", nickname = "updateTaskUsingPUT", notes = "You can edit only name, description and dueDate (ISO 8601 string).", response = TaskRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TaskRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<TaskRepresentation> updateTaskUsingPUT(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "" ) @Valid @RequestBody TaskUpdateRepresentation body);

}
