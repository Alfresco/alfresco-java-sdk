/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.alfresco.activiti.handler;

import com.alfresco.activiti.model.ResetPasswordRepresentation;
import com.alfresco.activiti.model.ResultListDataRepresentationLightUserRepresentation;
import com.alfresco.activiti.model.UserActionRepresentation;
import com.alfresco.activiti.model.UserRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "Users", description = "the Users API")
public interface UsersApi {

    @ApiOperation(value = "Execute an action for a specific user", nickname = "executeActionUsingPOST", notes = "Typical action is updating/reset password", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/users/{userId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> executeActionUsingPOST(@ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId, @ApiParam(value = "" ) @Valid @RequestBody UserActionRepresentation body);


    @ApiOperation(value = "Stream user profile picture", nickname = "getProfilePictureUsingGET1", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "User is not in the same tenant as current user") })
    @RequestMapping(value = "/activiti-app/api/enterprise/users/{userId}/picture",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> getProfilePictureUsingGET1(@ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "Get a user", nickname = "getUserUsingGET1", notes = "", response = UserRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/users/{userId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserRepresentation> getUserUsingGET1(@ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "Query users", nickname = "getUsersUsingGET1", notes = "A common use case is that a user wants to select another user (eg. when assigning a task) or group.", response = ResultListDataRepresentationLightUserRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationLightUserRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/users",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationLightUserRepresentation> getUsersUsingGET1(@ApiParam(value = "filter") @Valid @RequestParam(value = "filter", required = false) String filter, @ApiParam(value = "email") @Valid @RequestParam(value = "email", required = false) String email, @ApiParam(value = "externalId") @Valid @RequestParam(value = "externalId", required = false) String externalId, @ApiParam(value = "externalIdCaseInsensitive") @Valid @RequestParam(value = "externalIdCaseInsensitive", required = false) String externalIdCaseInsensitive, @ApiParam(value = "excludeTaskId") @Valid @RequestParam(value = "excludeTaskId", required = false) String excludeTaskId, @ApiParam(value = "excludeProcessId") @Valid @RequestParam(value = "excludeProcessId", required = false) String excludeProcessId, @ApiParam(value = "groupId") @Valid @RequestParam(value = "groupId", required = false) Long groupId, @ApiParam(value = "tenantId") @Valid @RequestParam(value = "tenantId", required = false) Long tenantId);


    @ApiOperation(value = "Request a password reset", nickname = "requestPasswordResetUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "User with given email does not exist or is not active") })
    @RequestMapping(value = "/activiti-app/api/enterprise/idm/passwords",
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> requestPasswordResetUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody ResetPasswordRepresentation body);


    @ApiOperation(value = "Update a user", nickname = "updateUserUsingPUT", notes = "", response = UserRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/users/{userId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserRepresentation> updateUserUsingPUT(@ApiParam(value = "userId", required=true) @PathVariable("userId") Long userId, @ApiParam(value = "" ) @Valid @RequestBody UserRepresentation body);

}
