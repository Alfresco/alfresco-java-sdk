/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.alfresco.activiti.handler;

import com.alfresco.activiti.model.ResultListDataRepresentationUserProcessInstanceFilterRepresentation;
import com.alfresco.activiti.model.ResultListDataRepresentationUserTaskFilterRepresentation;
import com.alfresco.activiti.model.UserFilterOrderRepresentation;
import com.alfresco.activiti.model.UserProcessInstanceFilterRepresentation;
import com.alfresco.activiti.model.UserTaskFilterRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "UserFilters", description = "the UserFilters API")
public interface UserFiltersApi {

    @ApiOperation(value = "Create a process instance filter", nickname = "createUserProcessInstanceFilterUsingPOST", notes = "", response = UserProcessInstanceFilterRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserProcessInstanceFilterRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/processes",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserProcessInstanceFilterRepresentation> createUserProcessInstanceFilterUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody UserProcessInstanceFilterRepresentation body);


    @ApiOperation(value = "Create a task filter", nickname = "createUserTaskFilterUsingPOST", notes = "", response = UserTaskFilterRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserTaskFilterRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/tasks",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserTaskFilterRepresentation> createUserTaskFilterUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody UserTaskFilterRepresentation body);


    @ApiOperation(value = "Delete a process instance filter", nickname = "deleteUserProcessInstanceFilterUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/processes/{userFilterId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteUserProcessInstanceFilterUsingDELETE(@ApiParam(value = "userFilterId", required=true) @PathVariable("userFilterId") Long userFilterId);


    @ApiOperation(value = "Delete a task filter", nickname = "deleteUserTaskFilterUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/tasks/{userFilterId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteUserTaskFilterUsingDELETE(@ApiParam(value = "userFilterId", required=true) @PathVariable("userFilterId") Long userFilterId);


    @ApiOperation(value = "Get a process instance filter", nickname = "getUserProcessInstanceFilterUsingGET", notes = "", response = UserProcessInstanceFilterRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserProcessInstanceFilterRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/processes/{userFilterId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserProcessInstanceFilterRepresentation> getUserProcessInstanceFilterUsingGET(@ApiParam(value = "userFilterId", required=true) @PathVariable("userFilterId") Long userFilterId);


    @ApiOperation(value = "List process instance filters", nickname = "getUserProcessInstanceFiltersUsingGET", notes = "Returns filters for the current user, optionally filtered by *appId*.", response = ResultListDataRepresentationUserProcessInstanceFilterRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationUserProcessInstanceFilterRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/processes",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationUserProcessInstanceFilterRepresentation> getUserProcessInstanceFiltersUsingGET(@ApiParam(value = "appId") @Valid @RequestParam(value = "appId", required = false) Long appId);


    @ApiOperation(value = "Get a task filter", nickname = "getUserTaskFilterUsingGET", notes = "", response = UserTaskFilterRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserTaskFilterRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/tasks/{userFilterId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserTaskFilterRepresentation> getUserTaskFilterUsingGET(@ApiParam(value = "userFilterId", required=true) @PathVariable("userFilterId") Long userFilterId);


    @ApiOperation(value = "List task filters", nickname = "getUserTaskFiltersUsingGET", notes = "Returns filters for the current user, optionally filtered by *appId*.", response = ResultListDataRepresentationUserTaskFilterRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationUserTaskFilterRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/tasks",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationUserTaskFilterRepresentation> getUserTaskFiltersUsingGET(@ApiParam(value = "appId") @Valid @RequestParam(value = "appId", required = false) Long appId);


    @ApiOperation(value = "Re-order the list of user process instance filters", nickname = "orderUserProcessInstanceFiltersUsingPUT", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/processes",
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> orderUserProcessInstanceFiltersUsingPUT(@ApiParam(value = "" ) @Valid @RequestBody UserFilterOrderRepresentation body);


    @ApiOperation(value = "Re-order the list of user task filters", nickname = "orderUserTaskFiltersUsingPUT", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/tasks",
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> orderUserTaskFiltersUsingPUT(@ApiParam(value = "" ) @Valid @RequestBody UserFilterOrderRepresentation body);


    @ApiOperation(value = "Update a process instance filter", nickname = "updateUserProcessInstanceFilterUsingPUT", notes = "", response = UserProcessInstanceFilterRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserProcessInstanceFilterRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/processes/{userFilterId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserProcessInstanceFilterRepresentation> updateUserProcessInstanceFilterUsingPUT(@ApiParam(value = "userFilterId", required=true) @PathVariable("userFilterId") Long userFilterId, @ApiParam(value = "" ) @Valid @RequestBody UserProcessInstanceFilterRepresentation body);


    @ApiOperation(value = "Update a task filter", nickname = "updateUserTaskFilterUsingPUT", notes = "", response = UserTaskFilterRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "user-filters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserTaskFilterRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/filters/tasks/{userFilterId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<UserTaskFilterRepresentation> updateUserTaskFilterUsingPUT(@ApiParam(value = "userFilterId", required=true) @PathVariable("userFilterId") Long userFilterId, @ApiParam(value = "" ) @Valid @RequestBody UserTaskFilterRepresentation body);

}
