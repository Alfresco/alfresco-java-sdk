/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.alfresco.activiti.handler;

import com.alfresco.activiti.model.RelatedContentRepresentation;
import com.alfresco.activiti.model.ResultListDataRepresentationRelatedContentRepresentation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "Content", description = "the Content API")
public interface ContentApi {

    @ApiOperation(value = "Attach existing content to a process instance", nickname = "createRelatedContentOnProcessInstanceUsingPOST", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/content",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<RelatedContentRepresentation> createRelatedContentOnProcessInstanceUsingPOST(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId, @ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent, @ApiParam(value = "" ) @Valid @RequestBody RelatedContentRepresentation body);


    @ApiOperation(value = "Upload content and attach to a process instance", nickname = "createRelatedContentOnProcessInstanceUsingPOST1", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/raw-content",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<RelatedContentRepresentation> createRelatedContentOnProcessInstanceUsingPOST1(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId, @ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent, @ApiParam(value = "" ) @Valid @RequestBody Object body);


    @ApiOperation(value = "Attach existing content to a task", nickname = "createRelatedContentOnTaskUsingPOST", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/content",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<RelatedContentRepresentation> createRelatedContentOnTaskUsingPOST(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent, @ApiParam(value = "" ) @Valid @RequestBody RelatedContentRepresentation body);


    @ApiOperation(value = "Upload content and attach to a task", nickname = "createRelatedContentOnTaskUsingPOST1", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/raw-content",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<RelatedContentRepresentation> createRelatedContentOnTaskUsingPOST1(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent, @ApiParam(value = "" ) @Valid @RequestBody Object body);


    @ApiOperation(value = "Upload content and create a local representation", nickname = "createTemporaryRawRelatedContentUsingPOST", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/content/raw",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<RelatedContentRepresentation> createTemporaryRawRelatedContentUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody Object body);


    @ApiOperation(value = "Create a local representation of content from a remote repository", nickname = "createTemporaryRelatedContentUsingPOST", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/content",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<RelatedContentRepresentation> createTemporaryRelatedContentUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody RelatedContentRepresentation body);


    @ApiOperation(value = "Remove a local content representation", nickname = "deleteContentUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/content/{contentId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteContentUsingDELETE(@ApiParam(value = "contentId", required=true) @PathVariable("contentId") Long contentId);


    @ApiOperation(value = "Get a local content representation", nickname = "getContentUsingGET", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/content/{contentId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<RelatedContentRepresentation> getContentUsingGET(@ApiParam(value = "contentId", required=true) @PathVariable("contentId") Long contentId);


    @ApiOperation(value = "Stream content rendition", nickname = "getRawContentUsingGET", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/content/{contentId}/rendition/{renditionType}",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> getRawContentUsingGET(@ApiParam(value = "contentId", required=true) @PathVariable("contentId") Long contentId, @ApiParam(value = "renditionType", required=true) @PathVariable("renditionType") String renditionType);


    @ApiOperation(value = "Stream content from a local content representation", nickname = "getRawContentUsingGET1", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/activiti-app/api/enterprise/content/{contentId}/raw",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> getRawContentUsingGET1(@ApiParam(value = "contentId", required=true) @PathVariable("contentId") Long contentId);


    @ApiOperation(value = "List content attached to a process instance", nickname = "getRelatedContentForProcessInstanceUsingGET", notes = "", response = ResultListDataRepresentationRelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationRelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/process-instances/{processInstanceId}/content",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationRelatedContentRepresentation> getRelatedContentForProcessInstanceUsingGET(@ApiParam(value = "processInstanceId", required=true) @PathVariable("processInstanceId") String processInstanceId, @ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent);


    @ApiOperation(value = "List content attached to a task", nickname = "getRelatedContentForTaskUsingGET", notes = "", response = ResultListDataRepresentationRelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationRelatedContentRepresentation.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/content",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ResultListDataRepresentationRelatedContentRepresentation> getRelatedContentForTaskUsingGET(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent);

}
