/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.dmn.simulation.handler;

import org.alfresco.activiti.dmn.simulation.model.EntryResponseContentOfProject;
import org.alfresco.activiti.dmn.simulation.model.EntryResponseContentOfRelease;
import org.alfresco.activiti.dmn.simulation.model.ListResponseContentOfProject;
import org.alfresco.activiti.dmn.simulation.model.ListResponseContentOfRelease;
import org.alfresco.activiti.dmn.simulation.model.Project;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "Projects", description = "the Projects API")
public interface ProjectsApi {

    @ApiOperation(value = "Copy an project as a new project with chosen name", nickname = "copyProjectUsingPOST", notes = "This will create a new project with chosen name containing the project folder and all related models.<br>", response = EntryResponseContentOfProject.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EntryResponseContentOfProject.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/{projectId}/copy",
        produces = "application/json", 
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<EntryResponseContentOfProject> copyProjectUsingPOST(@ApiParam(value = "The id of the project to copy", required=true) @PathVariable("projectId") String projectId, @NotNull @ApiParam(value = "The name of the project that will replace the original name of the project", required = true) @Valid @RequestParam(value = "name", required = true) String name);


    @ApiOperation(value = "Create an project from example", nickname = "createProjectFromExampleUsingPOST", notes = "This will download an example project (zip) and create a new project with chosen name", response = EntryResponseContentOfProject.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = EntryResponseContentOfProject.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/example",
        produces = "*/*", 
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<EntryResponseContentOfProject> createProjectFromExampleUsingPOST(@NotNull @ApiParam(value = "The example project id of the source example project", required = true) @Valid @RequestParam(value = "exampleProjectId", required = true) String exampleProjectId, @NotNull @ApiParam(value = "The name for the new project created from an example project", required = true) @Valid @RequestParam(value = "name", required = true) String name);


    @ApiOperation(value = "Create new project", nickname = "createProjectUsingPOST", notes = "", response = EntryResponseContentOfProject.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = EntryResponseContentOfProject.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<EntryResponseContentOfProject> createProjectUsingPOST(@ApiParam(value = "" ) @Valid @RequestBody Project body);


    @ApiOperation(value = "Delete project", nickname = "deleteProjectUsingDELETE", notes = "", tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/v1/projects/{projectId}",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteProjectUsingDELETE(@ApiParam(value = "The id of the project to delete", required=true) @PathVariable("projectId") String projectId);


    @ApiOperation(value = "Export an project as zip file", nickname = "exportProjectUsingGET", notes = "This will create and download the zip containing the project folder and all related models.<br>", tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/{projectId}/export",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    byte[] exportProjectUsingGET(@ApiParam(value = "The id of the project to export", required=true) @PathVariable("projectId") String projectId, @ApiParam(value = "<b>true</b> value enables a web browser to download the file as an attachment.<br> <b>false</b> means that a web browser may preview the file in a new tab or window, but not download the file.") @Valid @RequestParam(value = "attachment", required = false) Boolean attachment);


    @ApiOperation(value = "Get releases of a project", nickname = "getProjectReleaseUsingGET", notes = "Get metadata information for a specific version of a project.", response = ListResponseContentOfRelease.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListResponseContentOfRelease.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/{projectId}/releases",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ListResponseContentOfRelease> getProjectReleaseUsingGET(@ApiParam(value = "The id of the project to get the releases", required=true) @PathVariable("projectId") String projectId, @ApiParam(value = "") @Valid @RequestParam(value = "maxItems", required = false) Integer maxItems, @ApiParam(value = "") @Valid @RequestParam(value = "skipCount", required = false) Integer skipCount, @ApiParam(value = "") @Valid @RequestParam(value = "sort", required = false) String sort, @ApiParam(value = "The version of the project to get the releases") @Valid @RequestParam(value = "version", required = false) String version, @ApiParam(value = "Default value is false, and it returns only the latest versions. If it is true, it forces the service to return all versions.") @Valid @RequestParam(value = "showAllVersions", required = false) Boolean showAllVersions);


    @ApiOperation(value = "Get project", nickname = "getProjectUsingGET", notes = "", response = EntryResponseContentOfProject.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EntryResponseContentOfProject.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/{projectId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<EntryResponseContentOfProject> getProjectUsingGET(@ApiParam(value = "The id of the project to retrieve", required=true) @PathVariable("projectId") String projectId);


    @ApiOperation(value = "List projects", nickname = "getProjectsUsingGET", notes = "Get the list of available projects. Minimal information for each project is returned.", response = ListResponseContentOfProject.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ListResponseContentOfProject.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects",
        produces = "application/json", 
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<ListResponseContentOfProject> getProjectsUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "maxItems", required = false) Integer maxItems, @ApiParam(value = "") @Valid @RequestParam(value = "skipCount", required = false) Integer skipCount, @ApiParam(value = "") @Valid @RequestParam(value = "sort", required = false) String sort, @ApiParam(value = "The name or part of the name to filter projects") @Valid @RequestParam(value = "name", required = false) String name);


    @ApiOperation(value = "Import an project as zip file", nickname = "importProjectUsingPOST", notes = "Allows a zip file to be uploaded containing an project definition and any number of included models.", response = EntryResponseContentOfProject.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = EntryResponseContentOfProject.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/import",
        produces = "application/json", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<EntryResponseContentOfProject> importProjectUsingPOST(@ApiParam(value = "") @RequestParam(value="name", required=false)  String name);


    @ApiOperation(value = "Create a new release of a project", nickname = "releaseProjectUsingPOST", notes = "This will release the project.The new version is based on the version strategy", response = EntryResponseContentOfRelease.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EntryResponseContentOfRelease.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/{projectId}/releases",
        produces = "application/json", 
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<EntryResponseContentOfRelease> releaseProjectUsingPOST(@ApiParam(value = "The id of the project to release", required=true) @PathVariable("projectId") String projectId);


    @ApiOperation(value = "Update project details", nickname = "updateProjectUsingPUT", notes = "", response = EntryResponseContentOfProject.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EntryResponseContentOfProject.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/{projectId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<EntryResponseContentOfProject> updateProjectUsingPUT(@ApiParam(value = "The id of the project to update", required=true) @PathVariable("projectId") String projectId, @ApiParam(value = "" ) @Valid @RequestBody Project body);


    @ApiOperation(value = "Validate an project by id", nickname = "validateProjectUsingGET", notes = "", tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/v1/projects/{projectId}/validate",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> validateProjectUsingGET(@ApiParam(value = "The id of the project to validate", required=true) @PathVariable("projectId") String projectId);

}
