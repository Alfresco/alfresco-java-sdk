/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.alfresco.activiti.handler;

import com.alfresco.activiti.model.RestVariable;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "TaskVariables", description = "the TaskVariables API")
public interface TaskVariablesApi {

    @ApiOperation(value = "Create variables", nickname = "createTaskVariableUsingPOST", notes = "", response = RestVariable.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class, responseContainer = "List") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/variables",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<List<RestVariable>> createTaskVariableUsingPOST(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "" ) @Valid @RequestBody List<RestVariable> body);


    @ApiOperation(value = "Create or update variables", nickname = "deleteAllLocalTaskVariablesUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/variables",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAllLocalTaskVariablesUsingDELETE(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Delete a variable", nickname = "deleteVariableUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/variables/{variableName}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteVariableUsingDELETE(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "variableName", required=true) @PathVariable("variableName") String variableName, @ApiParam(value = "scope") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "Get a variable", nickname = "getVariableUsingGET", notes = "", response = RestVariable.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/variables/{variableName}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<RestVariable> getVariableUsingGET(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "variableName", required=true) @PathVariable("variableName") String variableName, @ApiParam(value = "scope") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "List variables", nickname = "getVariablesUsingGET", notes = "", response = RestVariable.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class, responseContainer = "List") })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/variables",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<RestVariable>> getVariablesUsingGET(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "scope") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "Update a variable", nickname = "updateVariableUsingPUT", notes = "", response = RestVariable.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class) })
    @RequestMapping(value = "/activiti-app/api/enterprise/tasks/{taskId}/variables/{variableName}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<RestVariable> updateVariableUsingPUT(@ApiParam(value = "taskId", required=true) @PathVariable("taskId") String taskId, @ApiParam(value = "variableName", required=true) @PathVariable("variableName") String variableName, @ApiParam(value = "" ) @Valid @RequestBody RestVariable body);

}
