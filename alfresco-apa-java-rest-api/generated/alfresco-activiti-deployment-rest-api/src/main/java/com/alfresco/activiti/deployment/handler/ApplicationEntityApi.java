/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.alfresco.activiti.deployment.handler;

import com.alfresco.activiti.deployment.model.EntryResponseContentDescriptor;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "ApplicationEntity")
public interface ApplicationEntityApi {

    @ApiOperation(value = "applicationDescriptor", nickname = "applicationDescriptorUsingDELETE", notes = "", tags={ "Application Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/deployment-service/applications/{id}/descriptor",
        produces = "*/*", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> applicationDescriptorUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "applicationDescriptor", nickname = "applicationDescriptorUsingGET", notes = "", response = EntryResponseContentDescriptor.class, tags={ "Application Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EntryResponseContentDescriptor.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/deployment-service/applications/{id}/descriptor",
        produces = "application/hal+json", 
        method = RequestMethod.GET)
    ResponseEntity<EntryResponseContentDescriptor> applicationDescriptorUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "applicationDescriptor", nickname = "applicationDescriptorUsingPATCH", notes = "", response = EntryResponseContentDescriptor.class, tags={ "Application Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EntryResponseContentDescriptor.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/deployment-service/applications/{id}/descriptor",
        produces = "*/*", 
        consumes = "text/uri-list",
        method = RequestMethod.PATCH)
    ResponseEntity<EntryResponseContentDescriptor> applicationDescriptorUsingPATCH(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody String body,@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "applicationDescriptor", nickname = "applicationDescriptorUsingPOST", notes = "", response = EntryResponseContentDescriptor.class, tags={ "Application Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EntryResponseContentDescriptor.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/deployment-service/applications/{id}/descriptor",
        produces = "*/*", 
        consumes = "text/uri-list",
        method = RequestMethod.POST)
    ResponseEntity<EntryResponseContentDescriptor> applicationDescriptorUsingPOST(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody String body,@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "applicationDescriptor", nickname = "applicationDescriptorUsingPUT", notes = "", response = EntryResponseContentDescriptor.class, tags={ "Application Entity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EntryResponseContentDescriptor.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/deployment-service/applications/{id}/descriptor",
        produces = "*/*", 
        consumes = "text/uri-list",
        method = RequestMethod.PUT)
    ResponseEntity<EntryResponseContentDescriptor> applicationDescriptorUsingPUT(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody String body,@ApiParam(value = "id",required=true) @PathVariable("id") String id);

}
