package {{configPackage}};

import static org.springframework.http.HttpHeaders.AUTHORIZATION;

import feign.RequestInterceptor;
import feign.RequestTemplate;
import feign.auth.BasicAuthRequestInterceptor;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;
import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager;
import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.OAuth2AuthorizeRequest;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;
import org.springframework.security.oauth2.core.OAuth2AccessToken;

@Configuration
@EnableConfigurationProperties({OAuth2ClientProperties.class})
public class ClientConfiguration {

  @Configuration
  @ConditionalOnProperty(name = "{{{title}}}.security.{{{name}}}.username")
  protected static class BasicAuthConfiguration {

    {{=<% %>=}}@Value("${<%title%>.security.<%name%>.username:}")<%={{ }}=%>
    private String {{{name}}}Username;
    {{=<% %>=}}@Value("${<%title%>.security.<%name%>.password:}")<%={{ }}=%>
    private String {{{name}}}Password;

    @Bean
    @ConditionalOnProperty("{{{title}}}.security.{{{name}}}.username")
    public BasicAuthRequestInterceptor basicAuthRequestInterceptor() {
      return new BasicAuthRequestInterceptor(this.{{{name}}}Username, this.{{{name}}}Password);
    }
  }

  @Configuration
  @ConditionalOnProperty("spring.security.oauth2.client.registration.alfresco-rest-api.provider")
  protected static class OAuth2Configuration {

    @Bean
    @ConditionalOnMissingBean({ClientRegistrationRepository.class})
    public InMemoryClientRegistrationRepository clientRegistrationRepository(OAuth2ClientProperties properties) {
      List<ClientRegistration> registrations = new ArrayList(OAuth2ClientPropertiesRegistrationAdapter.getClientRegistrations(properties).values());
      return new InMemoryClientRegistrationRepository(registrations);
    }

    @Bean
    @ConditionalOnMissingBean({OAuth2AuthorizedClientService.class})
    public InMemoryOAuth2AuthorizedClientService authorizedClientService(ClientRegistrationRepository clientRegistrationRepository) {
      return new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public OAuth2AuthorizedClientManager authorizedClientManager(final ClientRegistrationRepository clientRegistrationRepository,
          final OAuth2AuthorizedClientService authorizedClientService) {
      return new AuthorizedClientServiceOAuth2AuthorizedClientManager(clientRegistrationRepository, authorizedClientService);
    }

    @Bean
    public OAuth2FeignRequestInterceptor requestInterceptor(OAuth2AuthorizedClientManager oAuth2AuthorizedClientManager) {
      return new OAuth2FeignRequestInterceptor(oAuth2AuthorizedClientManager,
              OAuth2AuthorizeRequest.withClientRegistrationId("alfresco-rest-api")
                      .principal(new AnonymousAuthenticationToken("feignClient", "feignClient", AuthorityUtils.createAuthorityList("ROLE_ANONYMOUS")))
                      .build());
    }

    public class OAuth2FeignRequestInterceptor implements RequestInterceptor {

      private final OAuth2AuthorizedClientManager oAuth2AuthorizedClientManager;
      private final OAuth2AuthorizeRequest oAuth2AuthorizeRequest;

      public OAuth2FeignRequestInterceptor(OAuth2AuthorizedClientManager oAuth2AuthorizedClientManager, OAuth2AuthorizeRequest oAuth2AuthorizeRequest) {
        this.oAuth2AuthorizedClientManager = oAuth2AuthorizedClientManager;
        this.oAuth2AuthorizeRequest = oAuth2AuthorizeRequest;
      }

      @Override
      public void apply(RequestTemplate template) {
        template.header(AUTHORIZATION,getAuthorizationToken());
      }

      private String getAuthorizationToken() {
        final OAuth2AccessToken accessToken = oAuth2AuthorizedClientManager.authorize(oAuth2AuthorizeRequest).getAccessToken();
        return String.format("%s %s", accessToken.getTokenType().getValue(), accessToken.getTokenValue());
      }
    }
  }
}
