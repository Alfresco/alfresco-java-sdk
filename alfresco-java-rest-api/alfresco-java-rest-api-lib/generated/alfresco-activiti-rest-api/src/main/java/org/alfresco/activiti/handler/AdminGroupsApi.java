/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.AbstractGroupRepresentation;
import org.alfresco.activiti.model.AddGroupCapabilitiesRepresentation;
import org.alfresco.activiti.model.GroupRepresentation;
import org.alfresco.activiti.model.LightGroupRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationLightUserRepresentation;
import org.alfresco.activiti.model.UpdateGroupRepresentation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "AdminGroups")
public interface AdminGroupsApi {

    @ApiOperation(value = "Activate a group", nickname = "activateUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/action/activate",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<Void
> activateUsingPOST(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



);


    @ApiOperation(value = "Add users to a group", nickname = "addAllUsersToGroupUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/add-all-users",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<Void
> addAllUsersToGroupUsingPOST(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



);


    @ApiOperation(value = "Add capabilities to a group", nickname = "addGroupCapabilitiesUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/capabilities",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void
> addGroupCapabilitiesUsingPOST(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,


@ApiParam(value = "addGroupCapabilitiesRepresentation" ,required=true )  @Valid @RequestBody AddGroupCapabilitiesRepresentation addGroupCapabilitiesRepresentation

);


    @ApiOperation(value = "Add a user to a group", nickname = "addGroupMemberUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/members/{userId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<Void
> addGroupMemberUsingPOST(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,


@ApiParam(value = "userId",required=true) @PathVariable("userId") Long
 userId



);


    @ApiOperation(value = "Get a related group", nickname = "addRelatedGroupUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<Void
> addRelatedGroupUsingPOST(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,


@ApiParam(value = "relatedGroupId",required=true) @PathVariable("relatedGroupId") Long
 relatedGroupId



,@NotNull 

@ApiParam(value = "type", required = true) @Valid @RequestParam(value = "type", required = true) String
 type




);


    @ApiOperation(value = "Create a group", nickname = "createNewGroupUsingPOST", notes = "", response = LightGroupRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightGroupRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/groups",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<LightGroupRepresentation
> createNewGroupUsingPOST(


@ApiParam(value = "groupRepresentation" ,required=true )  @Valid @RequestBody GroupRepresentation groupRepresentation

);


    @ApiOperation(value = "Remove a capability from a group", nickname = "deleteGroupCapabilityUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/capabilities/{groupCapabilityId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void
> deleteGroupCapabilityUsingDELETE(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,


@ApiParam(value = "groupCapabilityId",required=true) @PathVariable("groupCapabilityId") Long
 groupCapabilityId



);


    @ApiOperation(value = "Delete a member from a group", nickname = "deleteGroupMemberUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/members/{userId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void
> deleteGroupMemberUsingDELETE(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,


@ApiParam(value = "userId",required=true) @PathVariable("userId") Long
 userId



);


    @ApiOperation(value = "Delete a group", nickname = "deleteGroupUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void
> deleteGroupUsingDELETE(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



);


    @ApiOperation(value = "Delete a related group", nickname = "deleteRelatedGroupUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void
> deleteRelatedGroupUsingDELETE(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,


@ApiParam(value = "relatedGroupId",required=true) @PathVariable("relatedGroupId") Long
 relatedGroupId



);


    @ApiOperation(value = "List group capabilities", nickname = "getCapabilitiesUsingGET", notes = "", response = String.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/potential-capabilities",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<String>
> getCapabilitiesUsingGET(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



);


    @ApiOperation(value = "Get group members", nickname = "getGroupUsersUsingGET", notes = "", response = ResultListDataRepresentationLightUserRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationLightUserRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/users",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationLightUserRepresentation
> getGroupUsersUsingGET(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,

@ApiParam(value = "filter") @Valid @RequestParam(value = "filter", required = false) String
 filter




,

@ApiParam(value = "page") @Valid @RequestParam(value = "page", required = false) Integer
 page




,

@ApiParam(value = "pageSize") @Valid @RequestParam(value = "pageSize", required = false) Integer
 pageSize




);


    @ApiOperation(value = "Get a group", nickname = "getGroupUsingGET", notes = "", response = AbstractGroupRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AbstractGroupRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<AbstractGroupRepresentation
> getGroupUsingGET(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,

@ApiParam(value = "includeAllUsers") @Valid @RequestParam(value = "includeAllUsers", required = false) Boolean
 includeAllUsers




,

@ApiParam(value = "summary") @Valid @RequestParam(value = "summary", required = false) Boolean
 summary




);


    @ApiOperation(value = "Query groups", nickname = "getGroupsUsingGET1", notes = "", response = LightGroupRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightGroupRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/admin/groups",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<LightGroupRepresentation>
> getGroupsUsingGET1(

@ApiParam(value = "tenantId") @Valid @RequestParam(value = "tenantId", required = false) Long
 tenantId




,

@ApiParam(value = "functional") @Valid @RequestParam(value = "functional", required = false) Boolean
 functional




,

@ApiParam(value = "summary") @Valid @RequestParam(value = "summary", required = false) Boolean
 summary




);


    @ApiOperation(value = "Get related groups", nickname = "getRelatedGroupsUsingGET", notes = "", response = LightGroupRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightGroupRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}/related-groups",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<LightGroupRepresentation>
> getRelatedGroupsUsingGET(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



);


    @ApiOperation(value = "Update a group", nickname = "updateGroupUsingPUT", notes = "", response = LightGroupRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightGroupRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/groups/{groupId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<LightGroupRepresentation
> updateGroupUsingPUT(


@ApiParam(value = "groupId",required=true) @PathVariable("groupId") Long
 groupId



,


@ApiParam(value = "updateGroupRepresentation" ,required=true )  @Valid @RequestBody UpdateGroupRepresentation updateGroupRepresentation

);

}
