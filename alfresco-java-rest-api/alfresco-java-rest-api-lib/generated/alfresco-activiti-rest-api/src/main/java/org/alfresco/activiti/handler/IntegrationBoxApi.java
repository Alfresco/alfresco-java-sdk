/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.BoxUserAccountCredentialsRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationBoxContent;
import org.alfresco.activiti.model.UserAccountCredentialsRepresentation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "IntegrationBox")
public interface IntegrationBoxApi {

    @ApiOperation(value = "Box Authorization", nickname = "confirmAuthorisationUsingGET", notes = "Returns Box OAuth HTML Page", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Error while calling Box"),
        @ApiResponse(code = 403, message = "Box module is not enabled"),
        @ApiResponse(code = 409, message = "No credentials stored to access box or credentials are invalid or expired") })
    @RequestMapping(value = "/enterprise/integration/box/confirm-auth-request",
        produces = "text/html", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Void> confirmAuthorisationUsingGET();


    @ApiOperation(value = "Add Box account", nickname = "createRepositoryAccountUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "Box module is not enabled") })
    @RequestMapping(value = "/enterprise/integration/box/{userId}/account",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> createRepositoryAccountUsingPOST(@ApiParam(value = "userId",required=true) @PathVariable("userId") Long userId,@ApiParam(value = "credentials" ,required=true )  @Valid @RequestBody UserAccountCredentialsRepresentation credentials);


    @ApiOperation(value = "Delete account information", nickname = "deleteRepositoryAccountUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "Box module is not enabled"),
        @ApiResponse(code = 404, message = "No Box account exists") })
    @RequestMapping(value = "/enterprise/integration/box/{userId}/account",
        produces = "*/*", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRepositoryAccountUsingDELETE(@ApiParam(value = "userId",required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "Get status information", nickname = "getBoxPluginStatusUsingGET", notes = "", response = Boolean.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class) })
    @RequestMapping(value = "/enterprise/integration/box/status",
        produces = "*/*", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Boolean> getBoxPluginStatusUsingGET();


    @ApiOperation(value = "List file and folders", nickname = "getFilesUsingGET", notes = "", response = ResultListDataRepresentationBoxContent.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationBoxContent.class),
        @ApiResponse(code = 400, message = "Error while calling Box"),
        @ApiResponse(code = 403, message = "Box module is not enabled"),
        @ApiResponse(code = 409, message = "No credentials stored to access box or credentials are invalid or expired") })
    @RequestMapping(value = "/enterprise/integration/box/files",
        produces = "*/*", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationBoxContent> getFilesUsingGET(@ApiParam(value = "filter") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "parent") @Valid @RequestParam(value = "parent", required = false) String parent);


    @ApiOperation(value = "Get account information", nickname = "getRepositoryAccountUsingGET", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 401, message = "User does not have sufficient permission or an error occurred", response = BoxUserAccountCredentialsRepresentation.class),
        @ApiResponse(code = 403, message = "Box module is not enabled") })
    @RequestMapping(value = "/enterprise/integration/box/{userId}/account",
        produces = "*/*", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Void> getRepositoryAccountUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "Update account information", nickname = "updateRepositoryAccountUsingPUT", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-box", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "Box module is not enabled"),
        @ApiResponse(code = 404, message = "No Box account exists") })
    @RequestMapping(value = "/enterprise/integration/box/{userId}/account",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRepositoryAccountUsingPUT(@ApiParam(value = "userId",required=true) @PathVariable("userId") Long userId,@ApiParam(value = "credentials" ,required=true )  @Valid @RequestBody UserAccountCredentialsRepresentation credentials);

}
