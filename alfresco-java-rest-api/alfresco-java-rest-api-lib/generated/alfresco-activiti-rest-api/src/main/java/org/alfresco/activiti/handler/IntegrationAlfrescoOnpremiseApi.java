/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.ResultListDataRepresentationAlfrescoContentRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationAlfrescoEndpointRepresentation;
import org.alfresco.activiti.model.ResultListDataRepresentationAlfrescoSiteRepresenation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "IntegrationAlfrescoOnpremise")
public interface IntegrationAlfrescoOnpremiseApi {

    @ApiOperation(value = "List Alfresco sites", nickname = "getAllSitesUsingGET", notes = "Returns ALL Sites", response = ResultListDataRepresentationAlfrescoSiteRepresenation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-alfresco-onpremise", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationAlfrescoSiteRepresenation.class) })
    @RequestMapping(value = "/enterprise/integration/alfresco/{repositoryId}/sites",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationAlfrescoSiteRepresenation> getAllSitesUsingGET(@ApiParam(value = "repositoryId",required=true) @PathVariable("repositoryId") String repositoryId);


    @ApiOperation(value = "List files and folders inside a specific folder identified by folder path", nickname = "getContentInFolderPathUsingGET", notes = "", response = ResultListDataRepresentationAlfrescoContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-alfresco-onpremise", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationAlfrescoContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/rest/integration/alfresco/{repositoryId}/sites/{siteId}/folderpath/{folderPath}/content",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInFolderPathUsingGET(@ApiParam(value = "repositoryId",required=true) @PathVariable("repositoryId") String repositoryId,@ApiParam(value = "siteId",required=true) @PathVariable("siteId") String siteId,@ApiParam(value = "folderPath",required=true) @PathVariable("folderPath") String folderPath);


    @ApiOperation(value = "List files and folders inside a specific folder", nickname = "getContentInFolderUsingGET", notes = "", response = ResultListDataRepresentationAlfrescoContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-alfresco-onpremise", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationAlfrescoContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/integration/alfresco/{repositoryId}/folders/{folderId}/content",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInFolderUsingGET(@ApiParam(value = "repositoryId",required=true) @PathVariable("repositoryId") String repositoryId,@ApiParam(value = "folderId",required=true) @PathVariable("folderId") String folderId);


    @ApiOperation(value = "List files and folders inside a specific site", nickname = "getContentInSiteUsingGET", notes = "", response = ResultListDataRepresentationAlfrescoContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-alfresco-onpremise", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationAlfrescoContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/integration/alfresco/{repositoryId}/sites/{siteId}/content",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInSiteUsingGET(@ApiParam(value = "repositoryId",required=true) @PathVariable("repositoryId") String repositoryId,@ApiParam(value = "siteId",required=true) @PathVariable("siteId") String siteId);


    @ApiOperation(value = "List Alfresco repositories", nickname = "getRepositoriesUsingGET", notes = "A tenant administrator can configure one or more Alfresco repositories to use when working with content.", response = ResultListDataRepresentationAlfrescoEndpointRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "integration-alfresco-onpremise", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationAlfrescoEndpointRepresentation.class) })
    @RequestMapping(value = "/enterprise/profile/accounts/alfresco",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationAlfrescoEndpointRepresentation> getRepositoriesUsingGET(@ApiParam(value = "tenantId") @Valid @RequestParam(value = "tenantId", required = false) Long tenantId,@ApiParam(value = "includeAccounts", defaultValue = "true") @Valid @RequestParam(value = "includeAccounts", required = false, defaultValue="true") Boolean includeAccounts);

}
