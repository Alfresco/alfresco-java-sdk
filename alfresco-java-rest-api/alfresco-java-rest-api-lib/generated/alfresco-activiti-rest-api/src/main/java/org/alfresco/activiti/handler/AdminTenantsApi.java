/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.CreateTenantRepresentation;
import org.alfresco.activiti.model.ImageUploadRepresentation;
import org.alfresco.activiti.model.LightTenantRepresentation;
import org.springframework.core.io.Resource;
import org.alfresco.activiti.model.TenantEvent;
import org.alfresco.activiti.model.TenantRepresentation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "AdminTenants")
public interface AdminTenantsApi {

    @ApiOperation(value = "Create a tenant", nickname = "createTenantUsingPOST", notes = "Only a tenant manager may access this endpoint", response = LightTenantRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-tenants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightTenantRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/tenants",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<LightTenantRepresentation> createTenantUsingPOST(@ApiParam(value = "createTenantRepresentation" ,required=true )  @Valid @RequestBody CreateTenantRepresentation createTenantRepresentation);


    @ApiOperation(value = "Delete a tenant", nickname = "deleteTenantUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-tenants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/tenants/{tenantId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTenantUsingDELETE(@ApiParam(value = "tenantId",required=true) @PathVariable("tenantId") Long tenantId);


    @ApiOperation(value = "Get tenant events", nickname = "getTenantEventsUsingGET", notes = "", response = TenantEvent.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-tenants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TenantEvent.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/admin/tenants/{tenantId}/events",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<TenantEvent>> getTenantEventsUsingGET(@ApiParam(value = "tenantId",required=true) @PathVariable("tenantId") Long tenantId);


    @ApiOperation(value = "Get a tenant's logo", nickname = "getTenantLogoUsingGET", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-tenants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/tenants/{tenantId}/logo",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Void> getTenantLogoUsingGET(@ApiParam(value = "tenantId",required=true) @PathVariable("tenantId") Long tenantId);


    @ApiOperation(value = "Get a tenant", nickname = "getTenantUsingGET", notes = "", response = TenantRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-tenants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TenantRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/tenants/{tenantId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<TenantRepresentation> getTenantUsingGET(@ApiParam(value = "tenantId",required=true) @PathVariable("tenantId") Long tenantId);


    @ApiOperation(value = "List tenants", nickname = "getTenantsUsingGET", notes = "Only a tenant manager may access this endpoint", response = LightTenantRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-tenants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LightTenantRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/admin/tenants",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<LightTenantRepresentation>> getTenantsUsingGET();


    @ApiOperation(value = "Update a tenant", nickname = "updateUsingPUT", notes = "", response = TenantRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-tenants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TenantRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/tenants/{tenantId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<TenantRepresentation> updateUsingPUT(@ApiParam(value = "tenantId",required=true) @PathVariable("tenantId") Long tenantId,@ApiParam(value = "createTenantRepresentation" ,required=true )  @Valid @RequestBody CreateTenantRepresentation createTenantRepresentation);


    @ApiOperation(value = "Update a tenant's logo", nickname = "uploadTenantLogoUsingPOST", notes = "", response = ImageUploadRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-tenants", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ImageUploadRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/tenants/{tenantId}/logo",
        produces = "application/json", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<ImageUploadRepresentation> uploadTenantLogoUsingPOST(@ApiParam(value = "tenantId",required=true) @PathVariable("tenantId") Long tenantId,@ApiParam(value = "file detail") @RequestParam("file") MultipartFile file);

}
