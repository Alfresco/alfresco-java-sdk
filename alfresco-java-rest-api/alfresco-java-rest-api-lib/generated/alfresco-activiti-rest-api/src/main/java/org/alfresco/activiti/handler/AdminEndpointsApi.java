/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.CreateEndpointBasicAuthRepresentation;
import org.alfresco.activiti.model.EndpointBasicAuthRepresentation;
import org.alfresco.activiti.model.EndpointConfigurationRepresentation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "AdminEndpoints")
public interface AdminEndpointsApi {

    @ApiOperation(value = "Add an endpoint authorization", nickname = "createBasicAuthConfigurationUsingPOST", notes = "", response = EndpointBasicAuthRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EndpointBasicAuthRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/basic-auths",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<EndpointBasicAuthRepresentation> createBasicAuthConfigurationUsingPOST(@ApiParam(value = "createRepresentation" ,required=true )  @Valid @RequestBody CreateEndpointBasicAuthRepresentation createRepresentation);


    @ApiOperation(value = "Create an endpoint", nickname = "createEndpointConfigurationUsingPOST", notes = "", response = EndpointConfigurationRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EndpointConfigurationRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/endpoints",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<EndpointConfigurationRepresentation> createEndpointConfigurationUsingPOST(@ApiParam(value = "representation" ,required=true )  @Valid @RequestBody EndpointConfigurationRepresentation representation);


    @ApiOperation(value = "Get an endpoint authorization", nickname = "getBasicAuthConfigurationUsingGET", notes = "", response = EndpointBasicAuthRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EndpointBasicAuthRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/basic-auths/{basicAuthId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<EndpointBasicAuthRepresentation> getBasicAuthConfigurationUsingGET(@ApiParam(value = "basicAuthId",required=true) @PathVariable("basicAuthId") Long basicAuthId,@NotNull @ApiParam(value = "tenantId", required = true) @Valid @RequestParam(value = "tenantId", required = true) Long tenantId);


    @ApiOperation(value = "List endpoint authorizations", nickname = "getBasicAuthConfigurationsUsingGET", notes = "", response = EndpointBasicAuthRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EndpointBasicAuthRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/admin/basic-auths",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<EndpointBasicAuthRepresentation>> getBasicAuthConfigurationsUsingGET(@NotNull @ApiParam(value = "tenantId", required = true) @Valid @RequestParam(value = "tenantId", required = true) Long tenantId);


    @ApiOperation(value = "Get an endpoint", nickname = "getEndpointConfigurationUsingGET1", notes = "", response = EndpointConfigurationRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EndpointConfigurationRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/endpoints/{endpointConfigurationId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<EndpointConfigurationRepresentation> getEndpointConfigurationUsingGET1(@ApiParam(value = "endpointConfigurationId",required=true) @PathVariable("endpointConfigurationId") Long endpointConfigurationId,@NotNull @ApiParam(value = "tenantId", required = true) @Valid @RequestParam(value = "tenantId", required = true) Long tenantId);


    @ApiOperation(value = "List endpoints", nickname = "getEndpointConfigurationsUsingGET1", notes = "", response = EndpointConfigurationRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EndpointConfigurationRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/admin/endpoints",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<EndpointConfigurationRepresentation>> getEndpointConfigurationsUsingGET1(@NotNull @ApiParam(value = "tenantId", required = true) @Valid @RequestParam(value = "tenantId", required = true) Long tenantId);


    @ApiOperation(value = "Delete an endpoint authorization", nickname = "removeBasicAuthonfigurationUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/basic-auths/{basicAuthId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeBasicAuthonfigurationUsingDELETE(@ApiParam(value = "basicAuthId",required=true) @PathVariable("basicAuthId") Long basicAuthId,@NotNull @ApiParam(value = "tenantId", required = true) @Valid @RequestParam(value = "tenantId", required = true) Long tenantId);


    @ApiOperation(value = "Delete an endpoint", nickname = "removeEndpointConfigurationUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/admin/endpoints/{endpointConfigurationId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeEndpointConfigurationUsingDELETE(@ApiParam(value = "endpointConfigurationId",required=true) @PathVariable("endpointConfigurationId") Long endpointConfigurationId,@NotNull @ApiParam(value = "tenantId", required = true) @Valid @RequestParam(value = "tenantId", required = true) Long tenantId);


    @ApiOperation(value = "Update an endpoint authorization", nickname = "updateBasicAuthConfigurationUsingPUT", notes = "", response = EndpointBasicAuthRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EndpointBasicAuthRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/basic-auths/{basicAuthId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<EndpointBasicAuthRepresentation> updateBasicAuthConfigurationUsingPUT(@ApiParam(value = "basicAuthId",required=true) @PathVariable("basicAuthId") Long basicAuthId,@ApiParam(value = "createRepresentation" ,required=true )  @Valid @RequestBody CreateEndpointBasicAuthRepresentation createRepresentation);


    @ApiOperation(value = "Update an endpoint", nickname = "updateEndpointConfigurationUsingPUT", notes = "", response = EndpointConfigurationRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "admin-endpoints", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EndpointConfigurationRepresentation.class) })
    @RequestMapping(value = "/enterprise/admin/endpoints/{endpointConfigurationId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<EndpointConfigurationRepresentation> updateEndpointConfigurationUsingPUT(@ApiParam(value = "endpointConfigurationId",required=true) @PathVariable("endpointConfigurationId") Long endpointConfigurationId,@ApiParam(value = "representation" ,required=true )  @Valid @RequestBody EndpointConfigurationRepresentation representation);

}
