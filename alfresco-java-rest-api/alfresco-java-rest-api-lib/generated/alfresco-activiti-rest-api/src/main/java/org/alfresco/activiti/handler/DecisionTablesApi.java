/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.JsonNode;
import org.alfresco.activiti.model.ResultListDataRepresentationRuntimeDecisionTableRepresentation;
import org.alfresco.activiti.model.RuntimeDecisionTableRepresentation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "DecisionTables")
public interface DecisionTablesApi {

    @ApiOperation(value = "Get definition for a decision table", nickname = "getDecisionTableEditorJsonUsingGET", notes = "", response = JsonNode.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JsonNode.class) })
    @RequestMapping(value = "/enterprise/decisions/decision-tables/{decisionTableId}/editorJson",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<JsonNode
> getDecisionTableEditorJsonUsingGET(


@ApiParam(value = "decisionTableId",required=true) @PathVariable("decisionTableId") Long
 decisionTableId



);


    @ApiOperation(value = "Get a decision table", nickname = "getDecisionTableUsingGET", notes = "", response = RuntimeDecisionTableRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RuntimeDecisionTableRepresentation.class) })
    @RequestMapping(value = "/enterprise/decisions/decision-tables/{decisionTableId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<RuntimeDecisionTableRepresentation
> getDecisionTableUsingGET(


@ApiParam(value = "decisionTableId",required=true) @PathVariable("decisionTableId") Long
 decisionTableId



);


    @ApiOperation(value = "Query decision tables", nickname = "getDecisionTablesUsingGET", notes = "", response = ResultListDataRepresentationRuntimeDecisionTableRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-tables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationRuntimeDecisionTableRepresentation.class) })
    @RequestMapping(value = "/enterprise/decisions/decision-tables",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationRuntimeDecisionTableRepresentation
> getDecisionTablesUsingGET(

@ApiParam(value = "nameLike") @Valid @RequestParam(value = "nameLike", required = false) String
 nameLike




,

@ApiParam(value = "keyLike") @Valid @RequestParam(value = "keyLike", required = false) String
 keyLike




,

@ApiParam(value = "tenantIdLike") @Valid @RequestParam(value = "tenantIdLike", required = false) String
 tenantIdLike




,

@ApiParam(value = "deploymentId") @Valid @RequestParam(value = "deploymentId", required = false) Long
 deploymentId




,

@ApiParam(value = "sort") @Valid @RequestParam(value = "sort", required = false) String
 sort




,

@ApiParam(value = "order") @Valid @RequestParam(value = "order", required = false) String
 order




,

@ApiParam(value = "start") @Valid @RequestParam(value = "start", required = false) Integer
 start




,

@ApiParam(value = "size") @Valid @RequestParam(value = "size", required = false) Integer
 size




);

}
