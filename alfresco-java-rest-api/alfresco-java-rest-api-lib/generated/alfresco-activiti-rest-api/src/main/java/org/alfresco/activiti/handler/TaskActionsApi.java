/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.AssigneeIdentifierRepresentation;
import org.alfresco.activiti.model.FormIdentifierRepresentation;
import org.alfresco.activiti.model.TaskRepresentation;
import org.alfresco.activiti.model.UserIdentifierRepresentation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "TaskActions")
public interface TaskActionsApi {

    @ApiOperation(value = "Assign a task to a user", nickname = "assignTaskUsingPUT", notes = "", response = TaskRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TaskRepresentation.class) })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/assign",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<TaskRepresentation> assignTaskUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "userIdentifier" ,required=true )  @Valid @RequestBody AssigneeIdentifierRepresentation userIdentifier);


    @ApiOperation(value = "Attach a form to a task", nickname = "attachFormUsingPUT", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/attach-form",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Void> attachFormUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "formIdentifier" ,required=true )  @Valid @RequestBody FormIdentifierRepresentation formIdentifier);


    @ApiOperation(value = "Claim a task", nickname = "claimTaskUsingPUT", notes = "To claim a task (in case the task is assigned to a group)", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/claim",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.PUT)
    ResponseEntity<Void> claimTaskUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Complete a task", nickname = "completeTaskUsingPUT", notes = "Use this endpoint to complete a standalone task or task without a form", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/complete",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.PUT)
    ResponseEntity<Void> completeTaskUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Delegate a task", nickname = "delegateTaskUsingPUT", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/delegate",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Void> delegateTaskUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "userIdentifier" ,required=true )  @Valid @RequestBody UserIdentifierRepresentation userIdentifier);


    @ApiOperation(value = "Involve a group with a task", nickname = "involveGroupUsingPOST", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/groups/{groupId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<Void> involveGroupUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "groupId",required=true) @PathVariable("groupId") String groupId);


    @ApiOperation(value = "Involve a user with a task", nickname = "involveUserUsingPUT", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/involve",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Void> involveUserUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "userIdentifier" ,required=true )  @Valid @RequestBody UserIdentifierRepresentation userIdentifier);


    @ApiOperation(value = "Remove a form from a task", nickname = "removeFormUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/remove-form",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeFormUsingDELETE(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Remove an involved group from a task", nickname = "removeInvolvedUserUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/groups/{groupId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeInvolvedUserUsingDELETE(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "groupId",required=true) @PathVariable("groupId") String groupId);


    @ApiOperation(value = "Remove an involved user from a task", nickname = "removeInvolvedUserUsingPUT", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/remove-involved",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Void> removeInvolvedUserUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "userIdentifier" ,required=true )  @Valid @RequestBody UserIdentifierRepresentation userIdentifier);


    @ApiOperation(value = "Resolve a task", nickname = "resolveTaskUsingPUT", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/resolve",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.PUT)
    ResponseEntity<Void> resolveTaskUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Unclaim a task", nickname = "unclaimTaskUsingPUT", notes = "To unclaim a task (in case the task was assigned to a group)", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-actions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/action/unclaim",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.PUT)
    ResponseEntity<Void> unclaimTaskUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);

}
