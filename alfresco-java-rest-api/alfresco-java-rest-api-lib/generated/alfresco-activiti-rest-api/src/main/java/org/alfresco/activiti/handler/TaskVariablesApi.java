/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import java.util.List;
import org.alfresco.activiti.model.RestVariable;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "TaskVariables")
public interface TaskVariablesApi {

    @ApiOperation(value = "Create variables", nickname = "createTaskVariableUsingPOST", notes = "", response = RestVariable.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/variables",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<List<RestVariable>> createTaskVariableUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "restVariables" ,required=true )  @Valid @RequestBody List<RestVariable> restVariables);


    @ApiOperation(value = "Create or update variables", nickname = "deleteAllLocalTaskVariablesUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/variables",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAllLocalTaskVariablesUsingDELETE(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Delete a variable", nickname = "deleteVariableUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/variables/{variableName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteVariableUsingDELETE(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "variableName",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "scope") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "Get a variable", nickname = "getVariableUsingGET", notes = "", response = RestVariable.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class) })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/variables/{variableName}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<RestVariable> getVariableUsingGET(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "variableName",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "scope") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "List variables", nickname = "getVariablesUsingGET", notes = "", response = RestVariable.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/variables",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<RestVariable>> getVariablesUsingGET(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "scope") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "Update a variable", nickname = "updateVariableUsingPUT", notes = "", response = RestVariable.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "task-variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RestVariable.class) })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/variables/{variableName}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<RestVariable> updateVariableUsingPUT(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "variableName",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "restVariable" ,required=true )  @Valid @RequestBody RestVariable restVariable);

}
