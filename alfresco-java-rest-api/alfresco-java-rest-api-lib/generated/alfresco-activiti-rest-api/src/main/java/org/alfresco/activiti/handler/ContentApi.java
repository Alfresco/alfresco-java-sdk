/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.RelatedContentRepresentation;
import org.springframework.core.io.Resource;
import org.alfresco.activiti.model.ResultListDataRepresentationRelatedContentRepresentation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "Content")
public interface ContentApi {

    @ApiOperation(value = "Attach existing content to a process instance", nickname = "createRelatedContentOnProcessInstanceUsingPOST", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/process-instances/{processInstanceId}/content",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<RelatedContentRepresentation> createRelatedContentOnProcessInstanceUsingPOST(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId,@ApiParam(value = "relatedContent" ,required=true )  @Valid @RequestBody RelatedContentRepresentation relatedContent,@ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent);


    @ApiOperation(value = "Upload content and attach to a process instance", nickname = "createRelatedContentOnProcessInstanceUsingPOST1", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/process-instances/{processInstanceId}/raw-content",
        produces = "application/json", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<RelatedContentRepresentation> createRelatedContentOnProcessInstanceUsingPOST1(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId,@ApiParam(value = "file detail") @RequestParam("file") MultipartFile file,@ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent);


    @ApiOperation(value = "Attach existing content to a task", nickname = "createRelatedContentOnTaskUsingPOST", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/content",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<RelatedContentRepresentation> createRelatedContentOnTaskUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "relatedContent" ,required=true )  @Valid @RequestBody RelatedContentRepresentation relatedContent,@ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent);


    @ApiOperation(value = "Upload content and attach to a task", nickname = "createRelatedContentOnTaskUsingPOST1", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/raw-content",
        produces = "application/json", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<RelatedContentRepresentation> createRelatedContentOnTaskUsingPOST1(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "file detail") @RequestParam("file") MultipartFile file,@ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent);


    @ApiOperation(value = "Upload content and create a local representation", nickname = "createTemporaryRawRelatedContentUsingPOST", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/content/raw",
        produces = "application/json", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<RelatedContentRepresentation> createTemporaryRawRelatedContentUsingPOST(@ApiParam(value = "file detail") @RequestParam("file") MultipartFile file);


    @ApiOperation(value = "Create a local representation of content from a remote repository", nickname = "createTemporaryRelatedContentUsingPOST", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/content",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<RelatedContentRepresentation> createTemporaryRelatedContentUsingPOST(@ApiParam(value = "relatedContent" ,required=true )  @Valid @RequestBody RelatedContentRepresentation relatedContent);


    @ApiOperation(value = "Remove a local content representation", nickname = "deleteContentUsingDELETE", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/content/{contentId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteContentUsingDELETE(@ApiParam(value = "contentId",required=true) @PathVariable("contentId") Long contentId);


    @ApiOperation(value = "Get a local content representation", nickname = "getContentUsingGET", notes = "", response = RelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/content/{contentId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<RelatedContentRepresentation> getContentUsingGET(@ApiParam(value = "contentId",required=true) @PathVariable("contentId") Long contentId);


    @ApiOperation(value = "Stream content rendition", nickname = "getRawContentUsingGET", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/content/{contentId}/rendition/{renditionType}",
        produces = "*/*", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Void> getRawContentUsingGET(@ApiParam(value = "contentId",required=true) @PathVariable("contentId") Long contentId,@ApiParam(value = "renditionType",required=true) @PathVariable("renditionType") String renditionType);


    @ApiOperation(value = "Stream content from a local content representation", nickname = "getRawContentUsingGET1", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/content/{contentId}/raw",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Void> getRawContentUsingGET1(@ApiParam(value = "contentId",required=true) @PathVariable("contentId") Long contentId);


    @ApiOperation(value = "List content attached to a process instance", nickname = "getRelatedContentForProcessInstanceUsingGET", notes = "", response = ResultListDataRepresentationRelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationRelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/process-instances/{processInstanceId}/content",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationRelatedContentRepresentation> getRelatedContentForProcessInstanceUsingGET(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId,@ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent);


    @ApiOperation(value = "List content attached to a task", nickname = "getRelatedContentForTaskUsingGET", notes = "", response = ResultListDataRepresentationRelatedContentRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationRelatedContentRepresentation.class) })
    @RequestMapping(value = "/enterprise/tasks/{taskId}/content",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationRelatedContentRepresentation> getRelatedContentForTaskUsingGET(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "isRelatedContent") @Valid @RequestParam(value = "isRelatedContent", required = false) Boolean isRelatedContent);

}
