/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.activiti.handler;

import org.alfresco.activiti.model.DecisionTableRepresentation;
import org.alfresco.activiti.model.DecisionTableSaveRepresentation;
import org.alfresco.activiti.model.ModelRepresentation;
import org.springframework.core.io.Resource;
import org.alfresco.activiti.model.ResultListDataRepresentationDecisionTableRepresentation;
import org.alfresco.activiti.model.ValidationErrorRepresentation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "DecisionTableModels")
public interface DecisionTableModelsApi {

    @ApiOperation(value = "Export decision table model.", nickname = "exportDecisionTableUsingGET", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/{decisionTableId}/export",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Void
> exportDecisionTableUsingGET(


@ApiParam(value = "Decision table id.",required=true) @PathVariable("decisionTableId") Long
 decisionTableId



);


    @ApiOperation(value = "Export specific version for decision table model.", nickname = "exportHistoricDecisionTableUsingGET", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/history/{historyModelId}/export",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Void
> exportHistoricDecisionTableUsingGET(


@ApiParam(value = "Id of another version of same decision table model.",required=true) @PathVariable("historyModelId") Long
 historyModelId



);


    @ApiOperation(value = "Get a decision table model by id.", nickname = "getDecisionTableUsingGET1", notes = "", response = DecisionTableRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DecisionTableRepresentation.class) })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/{decisionTableId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<DecisionTableRepresentation
> getDecisionTableUsingGET1(


@ApiParam(value = "Decision table id.",required=true) @PathVariable("decisionTableId") Long
 decisionTableId



);


    @ApiOperation(value = "Get a specific list of decision table models (with decision table definition) by their ids.", nickname = "getDecisionTablesUsingGET1", notes = "", response = DecisionTableRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DecisionTableRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/values",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<DecisionTableRepresentation>
> getDecisionTablesUsingGET1(@NotNull 

@ApiParam(value = "The id of the decision table. This id can be specified multiple times in the request for each decision table model id wanted to be returned.", required = true) @Valid @RequestParam(value = "decisionTableId", required = true) List<String>
 decisionTableId




);


    @ApiOperation(value = "Get a list of decision table models (without decision table definition).", nickname = "getDecisionTablesUsingGET2", notes = "", response = ResultListDataRepresentationDecisionTableRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResultListDataRepresentationDecisionTableRepresentation.class) })
    @RequestMapping(value = "/enterprise/editor/decision-table-models",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ResultListDataRepresentationDecisionTableRepresentation
> getDecisionTablesUsingGET2(

@ApiParam(value = "A reference to another model (ie. a process) associated with one or more decision table models.") @Valid @RequestParam(value = "referenceId", required = false) Long
 referenceId




,

@ApiParam(value = "Filter (search for a specified pattern) the decision tables associated with another model (i.e. a process) by name or description.") @Valid @RequestParam(value = "filter", required = false) String
 filter




);


    @ApiOperation(value = "Get specific version of a decision table model by id.", nickname = "getHistoricDecisionTableUsingGET", notes = "", response = DecisionTableRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DecisionTableRepresentation.class) })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/history/{historyModelId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<DecisionTableRepresentation
> getHistoricDecisionTableUsingGET(


@ApiParam(value = "Id of another version of same decision table model.",required=true) @PathVariable("historyModelId") Long
 historyModelId



);


    @ApiOperation(value = "Import decision table. This method return the decision table representation response as plain text.", nickname = "importDecisionTableTextUsingPOST", notes = "", response = String.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/import-decision-table-text",
        produces = "application/json", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<String
> importDecisionTableTextUsingPOST(



@ApiParam(value = "file detail") @RequestParam("file") MultipartFile file
);


    @ApiOperation(value = "Import decision table model.", nickname = "importDecisionTableUsingPOST", notes = "", response = ModelRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ModelRepresentation.class) })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/import-decision-table",
        produces = "application/json", 
        consumes = "multipart/form-data",
        method = RequestMethod.POST)
    ResponseEntity<ModelRepresentation
> importDecisionTableUsingPOST(



@ApiParam(value = "file detail") @RequestParam("file") MultipartFile file
);


    @ApiOperation(value = "Update decision table model.", nickname = "saveDecisionTableUsingPUT", notes = "", response = DecisionTableRepresentation.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DecisionTableRepresentation.class) })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/{decisionTableId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<DecisionTableRepresentation
> saveDecisionTableUsingPUT(


@ApiParam(value = "Decision table id.",required=true) @PathVariable("decisionTableId") Long
 decisionTableId



,


@ApiParam(value = "Decision table definition."  )  @Valid @RequestBody DecisionTableSaveRepresentation file

);


    @ApiOperation(value = "Validate decision table model.", nickname = "validateModelUsingPUT", notes = "", response = ValidationErrorRepresentation.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "decision-table-models", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ValidationErrorRepresentation.class, responseContainer = "List") })
    @RequestMapping(value = "/enterprise/editor/decision-table-models/{decisionTableId}/validate",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<List<ValidationErrorRepresentation>
> validateModelUsingPUT(


@ApiParam(value = "Decision table id.",required=true) @PathVariable("decisionTableId") Long
 decisionTableId



,


@ApiParam(value = "Decision table definition."  )  @Valid @RequestBody DecisionTableSaveRepresentation file

);

}
