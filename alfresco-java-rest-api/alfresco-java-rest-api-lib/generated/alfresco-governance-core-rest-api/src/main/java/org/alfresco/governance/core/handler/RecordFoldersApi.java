/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.governance.core.handler;

import org.alfresco.governance.core.model.Error;
import org.alfresco.governance.core.model.FilePlanComponentBodyUpdate;
import org.alfresco.governance.core.model.RMNodeBodyCreate;
import org.alfresco.governance.core.model.RecordEntry;
import org.alfresco.governance.core.model.RecordFolderAssociationPaging;
import org.alfresco.governance.core.model.RecordFolderEntry;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "RecordFolders")
public interface RecordFoldersApi {

    @ApiOperation(value = "Create a record", nickname = "createRecordFolderChild", notes = "Create a record as a primary child of **recordFolderId**.  This endpoint supports both JSON and multipart/form-data (file upload).  **Using multipart/form-data**  Use the **filedata** field to represent the content to upload, for example, the following curl command will create a node with the contents of test.txt in the test user's home folder.  ```curl -utest:test -X POST host:port/alfresco/api/-default-/public/gs/versions/1/record-folders/{recordFolderId}/records -F filedata=@test.txt```  This API method also supports record creation using application/json.  You must specify at least a **name** and **nodeType**.   You can create a non-electronic record like this: ```JSON {   \"name\":\"My Non-electronic Record\",   \"nodeType\":\"rma:nonElectronicDocument\",   \"properties\":     {       \"cm:description\":\"My Non-electronic Record Description\",       \"cm:title\":\"My Non-electronic Record Title\",       \"rma:box\":\"My Non-electronic Record Box\",       \"rma:file\":\"My Non-electronic Record File\",       \"rma:numberOfCopies\":1,       \"rma:physicalSize\":30,       \"rma:shelf\":\"My Non-electronic Record Shelf\",       \"rma:storageLocation\":\"My Non-electronic Record Location\"     } } ```  You can create an empty electronic record: ```JSON {   \"name\":\"My Electronic Record\",   \"nodeType\":\"cm:content\" } ```  Any missing aspects are applied automatically. You can set aspects explicitly, if needed, using an **aspectNames** field.  **Note:** You can create more than one child by specifying a list of nodes in the JSON body. For example, the following JSON body creates a record category and a record folder inside the specified **categoryId**: ```JSON [   {     \"name\":\"Record 1\",     \"nodeType\":\"cm:content\"   },   {     \"name\":\"Record 2\",     \"nodeType\":\"cm:content\"   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ``` ", response = RecordEntry.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "record-folders", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response", response = RecordEntry.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **recordFolderId** is not a valid format or **recordBodyCreate** is invalid "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to add children to **recordFolderId**"),
        @ApiResponse(code = 404, message = "**recordFolderId** does not exist"),
        @ApiResponse(code = 422, message = "Model integrity exception, including node name with invalid characters") })
    @RequestMapping(value = "/record-folders/{recordFolderId}/records",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<RecordEntry
> createRecordFolderChild(


@ApiParam(value = "The identifier of a record folder.",required=true) @PathVariable("recordFolderId") String
 recordFolderId



,


@ApiParam(value = "The record information to create.  This field is ignored for multipart/form-data content uploads. " ,required=true )  @Valid @RequestBody RMNodeBodyCreate recordBodyCreate

,

@ApiParam(value = "Returns additional information about the record. Any optional field from the response model can be requested. For example: * allowableOperations * content * isCompleted * path ") @Valid @RequestParam(value = "include", required = false) List<String>
 include




,

@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String>
 fields




);


    @ApiOperation(value = "Delete a record folder", nickname = "deleteRecordFolder", notes = "Deletes record folder **recordFolderId**. Deleted file plan components cannot be recovered, they are deleted permanently. ", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "record-folders", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response"),
        @ApiResponse(code = 400, message = "Invalid parameter: **recordFolderId** is not a valid format "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to delete **recordFolderId**"),
        @ApiResponse(code = 404, message = "**recordFolderId** does not exist"),
        @ApiResponse(code = 409, message = "**recordFolderId** is locked and cannot be deleted"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/record-folders/{recordFolderId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void
> deleteRecordFolder(


@ApiParam(value = "The identifier of a record folder.",required=true) @PathVariable("recordFolderId") String
 recordFolderId



);


    @ApiOperation(value = "Get a record folder", nickname = "getRecordFolder", notes = "Gets information for record folder **recordFolderId**  Mandatory fields and the record folder's aspects and properties are returned by default.  You can use the **include** parameter (include=allowableOperations) to return additional information. ", response = RecordFolderEntry.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "record-folders", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = RecordFolderEntry.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **recordFolderId** is not a valid format "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to read **recordFolderId**"),
        @ApiResponse(code = 404, message = "**recordFolderId** does not exist"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/record-folders/{recordFolderId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<RecordFolderEntry
> getRecordFolder(


@ApiParam(value = "The identifier of a record folder.",required=true) @PathVariable("recordFolderId") String
 recordFolderId



,

@ApiParam(value = "Returns additional information about the record folders. Any optional field from the response model can be requested. For example: * allowableOperations * isClosed * path ") @Valid @RequestParam(value = "include", required = false) List<String>
 include




,

@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String>
 fields




);


    @ApiOperation(value = "List records", nickname = "listRecordFolderChildren", notes = "Gets a list of records.  Minimal information for each record is returned by default.  The list of records includes primary children and secondary children, if there are any.  You can use the **include** parameter (include=allowableOperations) to return additional information. ", response = RecordFolderAssociationPaging.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "record-folders", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = RecordFolderAssociationPaging.class),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to read **recordFolderId**"),
        @ApiResponse(code = 404, message = "**recordFolderId** does not exist"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/record-folders/{recordFolderId}/records",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<RecordFolderAssociationPaging
> listRecordFolderChildren(


@ApiParam(value = "The identifier of a record folder.",required=true) @PathVariable("recordFolderId") String
 recordFolderId



,@Min(0)

@ApiParam(value = "The number of entities that exist in the collection before those included in this list.") @Valid @RequestParam(value = "skipCount", required = false) Integer
 skipCount




,@Min(1)

@ApiParam(value = "The maximum number of items to return in the list.") @Valid @RequestParam(value = "maxItems", required = false) Integer
 maxItems




,

@ApiParam(value = "Optionally filter the list. Here are some examples:  *   ```where=(nodeType='my:specialNodeType')```  *   ```where=(nodeType='my:specialNodeType INCLUDESUBTYPES')```  *   ```where=(isPrimary=true)``` ") @Valid @RequestParam(value = "where", required = false) String
 where




,

@ApiParam(value = "Returns additional information about the records. Any optional field from the response model can be requested. For example: * allowableOperations * aspectNames * association * content * isCompleted * path * properties ") @Valid @RequestParam(value = "include", required = false) List<String>
 include




,

@ApiParam(value = "Also include **source** (in addition to **entries**) with record information on the parent folder – the specified parent **recordFolderId**") @Valid @RequestParam(value = "includeSource", required = false) Boolean
 includeSource




,

@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String>
 fields




);


    @ApiOperation(value = "Update a record folder", nickname = "updateRecordFolder", notes = "Updates record folder **recordFolderId**. For example, you can rename a record folder: ```JSON {   \"name\":\"My new name\" } ``` You can also set or update one or more properties: ```JSON {   \"properties\":     {        \"rma:vitalRecordIndicator\": true,        \"rma:reviewPeriod\":\"month|6\"     } } ``` **Note:** if you want to add or remove aspects, then you must use **GET /record-folders/{recordFolderId}** first to get the complete set of *aspectNames*.  **Note:** Currently there is no optimistic locking for updates, so they are applied in \"last one wins\" order. ", response = RecordFolderEntry.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "record-folders", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = RecordFolderEntry.class),
        @ApiResponse(code = 400, message = "Invalid parameter: The update request is invalid or **recordFolderId** is not a valid format or **recordFolderBodyUpdate** is invalid "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to update **recordFolderId**"),
        @ApiResponse(code = 404, message = "**recordFolderId** does not exist"),
        @ApiResponse(code = 409, message = "Updated name clashes with an existing record folder in the current parent category"),
        @ApiResponse(code = 422, message = "Model integrity exception, including file name with invalid characters"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/record-folders/{recordFolderId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<RecordFolderEntry
> updateRecordFolder(


@ApiParam(value = "The identifier of a record folder.",required=true) @PathVariable("recordFolderId") String
 recordFolderId



,


@ApiParam(value = "The record folder information to update." ,required=true )  @Valid @RequestBody FilePlanComponentBodyUpdate recordFolderBodyUpdate

,

@ApiParam(value = "Returns additional information about the record folders. Any optional field from the response model can be requested. For example: * allowableOperations * isClosed * path ") @Valid @RequestParam(value = "include", required = false) List<String>
 include




,

@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String>
 fields




);

}
