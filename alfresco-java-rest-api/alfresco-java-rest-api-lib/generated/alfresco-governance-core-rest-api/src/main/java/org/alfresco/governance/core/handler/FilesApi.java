/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.governance.core.handler;

import org.alfresco.governance.core.model.Error;
import org.alfresco.governance.core.model.RecordEntry;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "Files")
public interface FilesApi {

    @ApiOperation(value = "Declare as record", nickname = "declareRecord", notes = "Declares the file **fileId** in the unfiled records container. The original file is moved to the Records Management site and a secondary parent association is created in the file's original site. Optionally, a destination record folder may be specified, enabling the record to be filed directly into that folder.", response = RecordEntry.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "files", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = RecordEntry.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **fileId** is not a valid format or **parentId** is not a valid format "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to declare a record"),
        @ApiResponse(code = 404, message = "**fileId** does not exist or **parentId** does not exist "),
        @ApiResponse(code = 422, message = "Model integrity exception: the action breaks system's integrity restrictions "),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/files/{fileId}/declare",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<RecordEntry> declareRecord(@ApiParam(value = "The identifier of a non-record file.",required=true) @PathVariable("fileId") String fileId,@ApiParam(value = "Flag to indicate whether the record should be hidden from the current parent folder.", defaultValue = "false") @Valid @RequestParam(value = "hideRecord", required = false, defaultValue="false") Boolean hideRecord,@ApiParam(value = "The identifier of the destination record folder.") @Valid @RequestParam(value = "parentId", required = false) String parentId,@ApiParam(value = "Returns additional information about the record. Any optional field from the response model can be requested. For example: * allowableOperations * content * isCompleted * path ") @Valid @RequestParam(value = "include", required = false) List<String> include,@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String> fields);

}
