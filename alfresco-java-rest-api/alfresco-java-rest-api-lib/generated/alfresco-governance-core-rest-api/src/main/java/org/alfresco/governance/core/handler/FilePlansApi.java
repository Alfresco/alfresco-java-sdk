/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.governance.core.handler;

import org.alfresco.governance.core.model.Error;
import org.alfresco.governance.core.model.FilePlanBodyUpdate;
import org.alfresco.governance.core.model.FilePlanEntry;
import org.alfresco.governance.core.model.RecordCategoryEntry;
import org.alfresco.governance.core.model.RecordCategoryPaging;
import org.alfresco.governance.core.model.RootCategoryBodyCreate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "FilePlans")
public interface FilePlansApi {

    @ApiOperation(value = "Create record categories for a file plan", nickname = "createFilePlanCategories", notes = "Creates a record category as a primary child of **filePlanId**.  You can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then the API method tries to create a unique name using an integer suffix.  This API method also supports record category creation using application/json.  You must specify at least a **name**.  You can create a category like this: ```JSON {   \"name\":\"My Record Category\" } ``` You can set properties when creating a record category: ```JSON {   \"name\":\"My Record Category\",   \"properties\":   {     \"rma:vitalRecordIndicator\":\"true\",     \"rma:reviewPeriod\":\"month|1\"   } } ```  Any missing aspects are applied automatically. You can set aspects explicitly, if needed, using an **aspectNames** field.  If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ``` ", response = RecordCategoryEntry.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "file-plans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response", response = RecordCategoryEntry.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **filePlanId** is not a valid format or **filePlanId** is invalid "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to add children to **filePlanId**"),
        @ApiResponse(code = 404, message = "**filePlanId** does not exist"),
        @ApiResponse(code = 409, message = "New name clashes with an existing node in the current parent container"),
        @ApiResponse(code = 422, message = "Model integrity exception, including node name with invalid characters") })
    @RequestMapping(value = "/file-plans/{filePlanId}/categories",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<RecordCategoryEntry> createFilePlanCategories(@ApiParam(value = "The identifier of a file plan. You can also use the -filePlan- alias.",required=true) @PathVariable("filePlanId") String filePlanId,@ApiParam(value = "The node information to create." ,required=true )  @Valid @RequestBody RootCategoryBodyCreate nodeBodyCreate,@ApiParam(value = "If true, then  a name clash will cause an attempt to auto rename by finding a unique name using an integer suffix. ") @Valid @RequestParam(value = "autoRename", required = false) Boolean autoRename,@ApiParam(value = "Returns additional information about the record category. Any optional field from the response model can be requested. For example: * allowableOperations * hasRetentionSchedule * path ") @Valid @RequestParam(value = "include", required = false) List<String> include,@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String> fields);


    @ApiOperation(value = "Get a file plan", nickname = "getFilePlan", notes = "Gets information for file plan **filePlanId**  Mandatory fields and the file plan's aspects and properties are returned by default.  You can use the **include** parameter (include=allowableOperations) to return additional information. ", response = FilePlanEntry.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "file-plans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = FilePlanEntry.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **filePlanId** is not a valid format "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to read **filePlanId**"),
        @ApiResponse(code = 404, message = "**filePlanId** does not exist"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/file-plans/{filePlanId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<FilePlanEntry> getFilePlan(@ApiParam(value = "The identifier of a file plan. You can also use the -filePlan- alias.",required=true) @PathVariable("filePlanId") String filePlanId,@ApiParam(value = "Returns additional information about the file plan. Any optional field from the response model can be requested. For example: * allowableOperations * path ") @Valid @RequestParam(value = "include", required = false) List<String> include,@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String> fields);


    @ApiOperation(value = "List file plans's children", nickname = "getFilePlanCategories", notes = "Returns a list of record categories.  Minimal information for each child is returned by default.  You can use the **include** parameter (include=allowableOperations) to return additional information. ", response = RecordCategoryPaging.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "file-plans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = RecordCategoryPaging.class),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to read **filePlanId**"),
        @ApiResponse(code = 404, message = "**filePlanId** does not exist"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/file-plans/{filePlanId}/categories",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<RecordCategoryPaging> getFilePlanCategories(@ApiParam(value = "The identifier of a file plan. You can also use the -filePlan- alias.",required=true) @PathVariable("filePlanId") String filePlanId,@Min(0)@ApiParam(value = "The number of entities that exist in the collection before those included in this list.") @Valid @RequestParam(value = "skipCount", required = false) Integer skipCount,@Min(1)@ApiParam(value = "The maximum number of items to return in the list.") @Valid @RequestParam(value = "maxItems", required = false) Integer maxItems,@ApiParam(value = "Returns additional information about the record category. Any optional field from the response model can be requested. For example: * allowableOperations * aspectNames * hasRetentionSchedule * path * properties ") @Valid @RequestParam(value = "include", required = false) List<String> include,@ApiParam(value = "Also include **source** (in addition to **entries**) with folder information on the parent node – the specified parent **filePlanId**") @Valid @RequestParam(value = "includeSource", required = false) Boolean includeSource,@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String> fields);


    @ApiOperation(value = "Update a file plan", nickname = "updateFilePlan", notes = "Updates file plan **filePlanId**. You can only set or update description and title properties: ```JSON {   \"properties\":     {        \"cm:description\": \"New Description\",        \"cm:title\":\"New Title\"     } } ```  **Note:** Currently there is no optimistic locking for updates, so they are applied in \"last one wins\" order. ", response = FilePlanEntry.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "file-plans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = FilePlanEntry.class),
        @ApiResponse(code = 400, message = "Invalid parameter: The update request is invalid or **filePlanId** is not a valid format or **filePlanBodyUpdate** is invalid "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "If current user does not have permission to update **filePlanId**"),
        @ApiResponse(code = 404, message = "**filePlanId** does not exist"),
        @ApiResponse(code = 409, message = "Updated name clashes with an existing fileplan"),
        @ApiResponse(code = 422, message = "Model integrity exception, including file name with invalid characters"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/file-plans/{filePlanId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<FilePlanEntry> updateFilePlan(@ApiParam(value = "The identifier of a file plan. You can also use the -filePlan- alias.",required=true) @PathVariable("filePlanId") String filePlanId,@ApiParam(value = "The file plan information to update." ,required=true )  @Valid @RequestBody FilePlanBodyUpdate filePlanBodyUpdate,@ApiParam(value = "Returns additional information about the file plan. Any optional field from the response model can be requested. For example: * allowableOperations * path ") @Valid @RequestParam(value = "include", required = false) List<String> include,@ApiParam(value = "A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. ") @Valid @RequestParam(value = "fields", required = false) List<String> fields);

}
