/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.governance.classification.handler;

import org.alfresco.governance.classification.model.Error;
import org.alfresco.governance.classification.model.SecuringMarksPaging;
import org.alfresco.governance.classification.model.SecuringMarksUpdateBody;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "SecuredNodes")
public interface SecuredNodesApi {

    @ApiOperation(value = "List all security marks assigned to a node.", nickname = "getSecuringMarks", notes = "List all the existing security marks assigned to a node with id **nodeId**.  **Note:** The control of the list size using pagination is currently not supported. ", response = SecuringMarksPaging.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "secured-nodes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SecuringMarksPaging.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **nodeId** is not in valid format "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to retrieve security marks assigned to **nodeId**"),
        @ApiResponse(code = 404, message = "**nodeId** does not exist"),
        @ApiResponse(code = 405, message = "Classification is not supported for **nodeId**"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/secured-nodes/{nodeId}/securing-marks",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<SecuringMarksPaging> getSecuringMarks(@ApiParam(value = "The identifier of a node.",required=true) @PathVariable("nodeId") String nodeId,@Min(0)@ApiParam(value = "The number of entities that exist in the collection before those included in this list.") @Valid @RequestParam(value = "skipCount", required = false) Integer skipCount,@Min(1)@ApiParam(value = "The maximum number of items to return in the list.") @Valid @RequestParam(value = "maxItems", required = false) Integer maxItems);


    @ApiOperation(value = "Manage the existing security marks for a node", nickname = "updateSecuringMarks", notes = "Manage the list of existing security marks for a node with id **nodeId**.", response = SecuringMarksPaging.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "secured-nodes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response", response = SecuringMarksPaging.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **nodeId** is not in a valid format or the **securityMarksUpdate** is invalid "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "Current user does not have permission to update **nodeId**"),
        @ApiResponse(code = 404, message = "**nodeId** does not exist"),
        @ApiResponse(code = 405, message = "Classification is not supported for **nodeId**"),
        @ApiResponse(code = 422, message = "There is a problem with the internal state that prevents the update of security marks for a node, for example current user would lose access to **nodeId**. "),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/secured-nodes/{nodeId}/securing-marks",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<SecuringMarksPaging> updateSecuringMarks(@ApiParam(value = "The identifier of a node.",required=true) @PathVariable("nodeId") String nodeId,@ApiParam(value = "The list of security marks updates." ,required=true )  @Valid @RequestBody SecuringMarksUpdateBody securityMarksUpdates);

}
