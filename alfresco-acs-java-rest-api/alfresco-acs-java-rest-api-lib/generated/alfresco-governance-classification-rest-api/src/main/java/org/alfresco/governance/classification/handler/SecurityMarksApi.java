/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.governance.classification.handler;

import org.alfresco.governance.classification.model.Error;
import org.alfresco.governance.classification.model.SecurityMarkModel;
import org.alfresco.governance.classification.model.SecurityMarksPaging;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "SecurityMarks")
public interface SecurityMarksApi {

    @ApiOperation(value = "Create a security mark in the security group with id **securityGroupId**.", nickname = "createSecurityMark", notes = "Creates a new security mark.  **Note:** You can create more than one security mark by specifying a list of marks in the JSON body. For example, the following JSON body creates two security marks: ```JSON [ {   \"name\":\"SecurityMark1\" }, {   \"name\":\"SecurityMark2\" } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example: ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [     {       \"entry\": {                  ...       }     },     {       \"entry\": {                  ...       }     }     ]   } } ``` ", response = SecurityMarkModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-marks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response", response = SecurityMarkModel.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **securityGroupId** is not in valid format or **name** is a mandatory parameter"),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "The user doesn't have permission to create a security mark"),
        @ApiResponse(code = 404, message = "Could not find security group with id **securityGroupId**"),
        @ApiResponse(code = 409, message = "A security mark with the name **name** already exists in the security group."),
        @ApiResponse(code = 422, message = "There is a problem with the internal state that prevents adding security marks, for example the mark cannot be added to a system security group. "),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups/{securityGroupId}/security-marks",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<SecurityMarkModel> createSecurityMark(@ApiParam(value = "The identifier for the security group",required=true) @PathVariable("securityGroupId") String securityGroupId,@ApiParam(value = "Security Mark" ,required=true )  @Valid @RequestBody SecurityMarkModel securityMark);


    @ApiOperation(value = "Delete a security mark from a security group", nickname = "deleteSecurityMark", notes = "Deletes the security mark with id **securityMarkId**.", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-marks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response"),
        @ApiResponse(code = 400, message = "Invalid parameter: **securityGroupId** is not in valid format or **securityMarkId** is not in valid format"),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "The user doesn't have permission to delete a security mark"),
        @ApiResponse(code = 404, message = "Could not find security mark with id **securityMarkId** or security group with id **securityGroupId**"),
        @ApiResponse(code = 422, message = "There is a problem with the internal state that prevents the delete of the security mark, for example the security mark with id **securityMarkId** is a member of **securityGroupId** which is in use. "),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups/{securityGroupId}/security-marks/{securityMarkId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteSecurityMark(@ApiParam(value = "The identifier for the security group",required=true) @PathVariable("securityGroupId") String securityGroupId,@ApiParam(value = "The identifier for the security mark",required=true) @PathVariable("securityMarkId") String securityMarkId);


    @ApiOperation(value = "Get security mark information", nickname = "getSecurityGroupMark", notes = "Gets the security mark with id **securityMarkId** from security group with id **securityGroupId**.", response = SecurityMarkModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-marks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SecurityMarkModel.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **securityGroupId** is not in valid format or **securityMarkId** is not in valid format"),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 404, message = "Could not find security mark with id **securityMarkId** or security group with id **securityGroupId**"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups/{securityGroupId}/security-marks/{securityMarkId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<SecurityMarkModel> getSecurityGroupMark(@ApiParam(value = "The identifier for the security group",required=true) @PathVariable("securityGroupId") String securityGroupId,@ApiParam(value = "The identifier for the security mark",required=true) @PathVariable("securityMarkId") String securityMarkId);


    @ApiOperation(value = "Gets all the marks in a security group", nickname = "getSecurityGroupMarks", notes = "Gets all the marks in a security group with id **securityGroupId**.  **Note:** The control of the list size using pagination is currently not supported. ", response = SecurityMarksPaging.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-marks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SecurityMarksPaging.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **securityGroupId** is not in valid format"),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 404, message = "Could not find security group with id: **securityGroupId**"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups/{securityGroupId}/security-marks",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<SecurityMarksPaging> getSecurityGroupMarks(@ApiParam(value = "The identifier for the security group",required=true) @PathVariable("securityGroupId") String securityGroupId);


    @ApiOperation(value = "Update a security mark with id **securityMarkId**", nickname = "updateSecurityMark", notes = "Updates the security mark with id **securityMarkId**. For example, you can rename a security mark.", response = SecurityMarkModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-marks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SecurityMarkModel.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **securityGroupId** is not in valid format or **securityMarkId** is not in valid format or **name** is a mandatory parameter "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "The user doesn't have permission to update a security mark"),
        @ApiResponse(code = 404, message = "Could not find security mark with id **securityMarkId** or security group with id **securityGroupId**"),
        @ApiResponse(code = 409, message = "A security mark with the name **name** already exists in the security group."),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups/{securityGroupId}/security-marks/{securityMarkId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<SecurityMarkModel> updateSecurityMark(@ApiParam(value = "The identifier for the security group",required=true) @PathVariable("securityGroupId") String securityGroupId,@ApiParam(value = "The identifier for the security mark",required=true) @PathVariable("securityMarkId") String securityMarkId,@ApiParam(value = "Security Mark" ,required=true )  @Valid @RequestBody SecurityMarkModel securityMark);

}
