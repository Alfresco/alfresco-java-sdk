/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.governance.classification.handler;

import org.alfresco.governance.classification.model.Error;
import org.alfresco.governance.classification.model.SecurityGroupModel;
import org.alfresco.governance.classification.model.SecurityGroupPaging;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.cloud.openfeign.CollectionFormat;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "SecurityGroups")
public interface SecurityGroupsApi {

    @ApiOperation(value = "Create a security group", nickname = "createSecurityGroup", notes = "Creates a new security group.", response = SecurityGroupModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response", response = SecurityGroupModel.class),
        @ApiResponse(code = 400, message = "**groupName** is a mandatory parameter or **groupType** is a mandatory parameter or the value provided for groupType is not one of the values accepted for Enum class: [HIERARCHICAL, USER_REQUIRES_ALL, USER_REQUIRES_ANY] "),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "The user doesn't have permission to create a security group."),
        @ApiResponse(code = 409, message = "A security group with the name **groupName** already exists."),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<SecurityGroupModel> createSecurityGroup(@ApiParam(value = "Security Group" ,required=true )  @Valid @RequestBody SecurityGroupModel securityGroup);


    @ApiOperation(value = "Delete a security group", nickname = "deleteSecurityGroup", notes = "Deletes the security group with id **securityGroupId**, including any marks.", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response"),
        @ApiResponse(code = 400, message = "Invalid parameter: **securityGroupId** is not in valid format"),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "The user doesn't have permission to delete a security group."),
        @ApiResponse(code = 404, message = "Could not find security group with id **securityGroupId**"),
        @ApiResponse(code = 422, message = "There is a problem with the internal state that prevents the delete of the security group, for example the security group with id **securityGroupId** is in use. "),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups/{securityGroupId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<Void> deleteSecurityGroup(@ApiParam(value = "The identifier for the security group",required=true) @PathVariable("securityGroupId") String securityGroupId);


    @ApiOperation(value = "Get security group information", nickname = "getSecurityGroup", notes = "Gets the security group with id **securityGroupId**.", response = SecurityGroupModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SecurityGroupModel.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **securityGroupId** is not in valid format"),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 404, message = "Could not find security group with id **securityGroupId**"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups/{securityGroupId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<SecurityGroupModel> getSecurityGroup(@ApiParam(value = "The identifier for the security group",required=true) @PathVariable("securityGroupId") String securityGroupId,@ApiParam(value = "The extra fields that should be added in the response.") @Valid @RequestParam(value = "include", required = false) String include);


    @ApiOperation(value = "List all security groups", nickname = "listSecurityGroups", notes = "Gets all security groups.  **Note:** The control of the list size using pagination is currently not supported. ", response = SecurityGroupPaging.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SecurityGroupPaging.class),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<SecurityGroupPaging> listSecurityGroups(@ApiParam(value = "The extra fields that should be added in the response.") @Valid @RequestParam(value = "include", required = false) String include);


    @ApiOperation(value = "Update a security group", nickname = "updateSecurityGroup", notes = "Updates the security group with id **securityGroupId**. For example, you can rename a security group.", response = SecurityGroupModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "security-groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SecurityGroupModel.class),
        @ApiResponse(code = 400, message = "Invalid parameter: **securityGroupId** is not in valid format or **groupName** is a mandatory parameter"),
        @ApiResponse(code = 401, message = "Authentication failed"),
        @ApiResponse(code = 403, message = "The user doesn't have permission to update a security group"),
        @ApiResponse(code = 404, message = "Could not find security group with id **securityGroupId**"),
        @ApiResponse(code = 409, message = "A security group with the name **groupName** already exists."),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/security-groups/{securityGroupId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    @CollectionFormat(feign.CollectionFormat.CSV)
    ResponseEntity<SecurityGroupModel> updateSecurityGroup(@ApiParam(value = "The identifier for the security group",required=true) @PathVariable("securityGroupId") String securityGroupId,@ApiParam(value = "Security Group" ,required=true )  @Valid @RequestBody SecurityGroupModel securityGroup);

}
