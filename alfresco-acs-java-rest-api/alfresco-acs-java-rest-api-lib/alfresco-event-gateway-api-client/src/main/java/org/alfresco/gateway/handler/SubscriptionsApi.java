/*
 * Copyright 2021-2021 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alfresco.gateway.handler;

import com.fasterxml.jackson.databind.JsonNode;
import org.alfresco.gateway.model.Subscription;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
@Api(value = "Subscriptions")
public interface SubscriptionsApi {

    @ApiOperation(value = "", nickname = "createSubscription", notes = "Create a Subscription", response = Subscription.class, authorizations = {
        @Authorization(value = "basic-auth"),
        @Authorization(value = "bearer-key")    }, tags={ "subscriptions", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful operation", response = Subscription.class),
        @ApiResponse(code = 422, message = "Invalid subscription or filter configuration"),
        @ApiResponse(code = 400, message = "Invalid subscription format or unsupported subscription or filter type"),
        @ApiResponse(code = 401, message = "Invalid authentication provided"),
        @ApiResponse(code = 403, message = "User not authorized to perform the operation"),
        @ApiResponse(code = 500, message = "Uncategorized server error") })
    @RequestMapping(value = "/subscriptions",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Subscription> createSubscription(@ApiParam(value = "The subscription object to be created"  )  @Valid @RequestBody Subscription body);


    @ApiOperation(value = "", nickname = "getSubscription", notes = "Get a Subscription by its id", response = Subscription.class, authorizations = {
        @Authorization(value = "basic-auth"),
        @Authorization(value = "bearer-key")    }, tags={ "subscriptions", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful operation", response = Subscription.class),
        @ApiResponse(code = 404, message = "Subscription not found"),
        @ApiResponse(code = 401, message = "Invalid authentication provided"),
        @ApiResponse(code = 403, message = "User not authorized to perform the operation"),
        @ApiResponse(code = 500, message = "Uncategorized server error") })
    @RequestMapping(value = "/subscriptions/{id}",
        produces = "application/json",
        method = RequestMethod.GET)
    ResponseEntity<Subscription> getSubscription(@ApiParam(value = "The subscription id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "partiallyUpdateSubscription", notes = "Update the status of a Subscription", response = Subscription.class, authorizations = {
        @Authorization(value = "basic-auth"),
        @Authorization(value = "bearer-key")    }, tags={ "subscriptions", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful operation", response = Subscription.class),
        @ApiResponse(code = 400, message = "Invalid request format"),
        @ApiResponse(code = 422, message = "Invalid request attributes"),
        @ApiResponse(code = 401, message = "Invalid authentication provided"),
        @ApiResponse(code = 403, message = "User not authorized to perform the operation"),
        @ApiResponse(code = 500, message = "Uncategorized server error") })
    @RequestMapping(value = "/subscriptions/{id}",
        produces = "application/json",
        consumes = "application/merge-patch+json",
        method = RequestMethod.PATCH)
    ResponseEntity<Subscription> partiallyUpdateSubscription(@ApiParam(value = "The subscription id",required=true) @PathVariable("id") String id, @ApiParam(value = "The JSON snippet holding the new status of the subscription"  )  @Valid @RequestBody JsonNode body);

}
